"use strict";var Ve=Object.defineProperty;var Le=(n,e,t)=>e in n?Ve(n,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[e]=t;var O=(n,e,t)=>(Le(n,typeof e!="symbol"?e+"":e,t),t);require("events");function noop(){}const identity=n=>n;function run(n){return n()}function blank_object(){return Object.create(null)}function run_all(n){n.forEach(run)}function is_function(n){return typeof n=="function"}function safe_not_equal(n,e){return n!=n?e==e:n!==e||n&&typeof n=="object"||typeof n=="function"}function is_empty(n){return Object.keys(n).length===0}function subscribe(n,...e){if(n==null)return noop;const t=n.subscribe(...e);return t.unsubscribe?()=>t.unsubscribe():t}function component_subscribe(n,e,t){n.$$.on_destroy.push(subscribe(e,t))}function split_css_unit(n){const e=typeof n=="string"&&n.match(/^\s*(-?[\d.]+)([^\s]*)\s*$/);return e?[parseFloat(e[1]),e[2]||"px"]:[n,"px"]}const contenteditable_truthy_values=["",!0,1,"true","contenteditable"],is_client=typeof window<"u";let now=is_client?()=>window.performance.now():()=>Date.now(),raf=is_client?n=>requestAnimationFrame(n):noop;const tasks=new Set;function run_tasks(n){tasks.forEach(e=>{e.c(n)||(tasks.delete(e),e.f())}),tasks.size!==0&&raf(run_tasks)}function loop(n){let e;return tasks.size===0&&raf(run_tasks),{promise:new Promise(t=>{tasks.add(e={c:n,f:t})}),abort(){tasks.delete(e)}}}let is_hydrating=!1;function start_hydrating(){is_hydrating=!0}function end_hydrating(){is_hydrating=!1}function upper_bound(n,e,t,r){for(;n<e;){const i=n+(e-n>>1);t(i)<=r?n=i+1:e=i}return n}function init_hydrate(n){if(n.hydrate_init)return;n.hydrate_init=!0;let e=n.childNodes;if(n.nodeName==="HEAD"){const c=[];for(let l=0;l<e.length;l++){const d=e[l];d.claim_order!==void 0&&c.push(d)}e=c}const t=new Int32Array(e.length+1),r=new Int32Array(e.length);t[0]=-1;let i=0;for(let c=0;c<e.length;c++){const l=e[c].claim_order,d=(i>0&&e[t[i]].claim_order<=l?i+1:upper_bound(1,i,f=>e[t[f]].claim_order,l))-1;r[c]=t[d]+1;const u=d+1;t[u]=c,i=Math.max(u,i)}const a=[],o=[];let s=e.length-1;for(let c=t[i]+1;c!=0;c=r[c-1]){for(a.push(e[c-1]);s>=c;s--)o.push(e[s]);s--}for(;s>=0;s--)o.push(e[s]);a.reverse(),o.sort((c,l)=>c.claim_order-l.claim_order);for(let c=0,l=0;c<o.length;c++){for(;l<a.length&&o[c].claim_order>=a[l].claim_order;)l++;const d=l<a.length?a[l]:null;n.insertBefore(o[c],d)}}function append(n,e){n.appendChild(e)}function get_root_for_style(n){if(!n)return document;const e=n.getRootNode?n.getRootNode():n.ownerDocument;return e&&e.host?e:n.ownerDocument}function append_empty_stylesheet(n){const e=element("style");return append_stylesheet(get_root_for_style(n),e),e.sheet}function append_stylesheet(n,e){return append(n.head||n,e),e.sheet}function append_hydration(n,e){if(is_hydrating){for(init_hydrate(n),(n.actual_end_child===void 0||n.actual_end_child!==null&&n.actual_end_child.parentNode!==n)&&(n.actual_end_child=n.firstChild);n.actual_end_child!==null&&n.actual_end_child.claim_order===void 0;)n.actual_end_child=n.actual_end_child.nextSibling;e!==n.actual_end_child?(e.claim_order!==void 0||e.parentNode!==n)&&n.insertBefore(e,n.actual_end_child):n.actual_end_child=e.nextSibling}else(e.parentNode!==n||e.nextSibling!==null)&&n.appendChild(e)}function insert_hydration(n,e,t){is_hydrating&&!t?append_hydration(n,e):(e.parentNode!==n||e.nextSibling!=t)&&n.insertBefore(e,t||null)}function detach(n){n.parentNode&&n.parentNode.removeChild(n)}function destroy_each(n,e){for(let t=0;t<n.length;t+=1)n[t]&&n[t].d(e)}function element(n){return document.createElement(n)}function svg_element(n){return document.createElementNS("http://www.w3.org/2000/svg",n)}function text(n){return document.createTextNode(n)}function space(){return text(" ")}function listen(n,e,t,r){return n.addEventListener(e,t,r),()=>n.removeEventListener(e,t,r)}function attr(n,e,t){t==null?n.removeAttribute(e):n.getAttribute(e)!==t&&n.setAttribute(e,t)}function children(n){return Array.from(n.childNodes)}function init_claim_info(n){n.claim_info===void 0&&(n.claim_info={last_index:0,total_claimed:0})}function claim_node(n,e,t,r,i=!1){init_claim_info(n);const a=(()=>{for(let o=n.claim_info.last_index;o<n.length;o++){const s=n[o];if(e(s)){const c=t(s);return c===void 0?n.splice(o,1):n[o]=c,i||(n.claim_info.last_index=o),s}}for(let o=n.claim_info.last_index-1;o>=0;o--){const s=n[o];if(e(s)){const c=t(s);return c===void 0?n.splice(o,1):n[o]=c,i?c===void 0&&n.claim_info.last_index--:n.claim_info.last_index=o,s}}return r()})();return a.claim_order=n.claim_info.total_claimed,n.claim_info.total_claimed+=1,a}function claim_element_base(n,e,t,r){return claim_node(n,i=>i.nodeName===e,i=>{const a=[];for(let o=0;o<i.attributes.length;o++){const s=i.attributes[o];t[s.name]||a.push(s.name)}a.forEach(o=>i.removeAttribute(o))},()=>r(e))}function claim_element(n,e,t){return claim_element_base(n,e,t,element)}function claim_svg_element(n,e,t){return claim_element_base(n,e,t,svg_element)}function claim_text(n,e){return claim_node(n,t=>t.nodeType===3,t=>{const r=""+e;if(t.data.startsWith(r)){if(t.data.length!==r.length)return t.splitText(r.length)}else t.data=r},()=>text(e),!0)}function claim_space(n){return claim_text(n," ")}function set_data(n,e){e=""+e,n.data!==e&&(n.data=e)}function set_data_contenteditable(n,e){e=""+e,n.wholeText!==e&&(n.data=e)}function set_data_maybe_contenteditable(n,e,t){~contenteditable_truthy_values.indexOf(t)?set_data_contenteditable(n,e):set_data(n,e)}function set_style(n,e,t,r){t==null?n.style.removeProperty(e):n.style.setProperty(e,t,r?"important":"")}function custom_event(n,e,{bubbles:t=!1,cancelable:r=!1}={}){const i=document.createEvent("CustomEvent");return i.initCustomEvent(n,t,r,e),i}const managed_styles=new Map;let active=0;function hash(n){let e=5381,t=n.length;for(;t--;)e=(e<<5)-e^n.charCodeAt(t);return e>>>0}function create_style_information(n,e){const t={stylesheet:append_empty_stylesheet(e),rules:{}};return managed_styles.set(n,t),t}function create_rule(n,e,t,r,i,a,o,s=0){const c=16.666/r;let l=`{
`;for(let g=0;g<=1;g+=c){const h=e+(t-e)*a(g);l+=g*100+`%{${o(h,1-h)}}
`}const d=l+`100% {${o(t,1-t)}}
}`,u=`__svelte_${hash(d)}_${s}`,f=get_root_for_style(n),{stylesheet:_,rules:p}=managed_styles.get(f)||create_style_information(f,n);p[u]||(p[u]=!0,_.insertRule(`@keyframes ${u} ${d}`,_.cssRules.length));const y=n.style.animation||"";return n.style.animation=`${y?`${y}, `:""}${u} ${r}ms linear ${i}ms 1 both`,active+=1,u}function delete_rule(n,e){const t=(n.style.animation||"").split(", "),r=t.filter(e?a=>a.indexOf(e)<0:a=>a.indexOf("__svelte")===-1),i=t.length-r.length;i&&(n.style.animation=r.join(", "),active-=i,active||clear_rules())}function clear_rules(){raf(()=>{active||(managed_styles.forEach(n=>{const{ownerNode:e}=n.stylesheet;e&&detach(e)}),managed_styles.clear())})}let current_component;function set_current_component(n){current_component=n}function get_current_component(){if(!current_component)throw new Error("Function called outside component initialization");return current_component}function onMount(n){get_current_component().$$.on_mount.push(n)}function createEventDispatcher(){const n=get_current_component();return(e,t,{cancelable:r=!1}={})=>{const i=n.$$.callbacks[e];if(i){const a=custom_event(e,t,{cancelable:r});return i.slice().forEach(o=>{o.call(n,a)}),!a.defaultPrevented}return!0}}function bubble(n,e){const t=n.$$.callbacks[e.type];t&&t.slice().forEach(r=>r.call(this,e))}const dirty_components=[],binding_callbacks=[];let render_callbacks=[];const flush_callbacks=[],resolved_promise=Promise.resolve();let update_scheduled=!1;function schedule_update(){update_scheduled||(update_scheduled=!0,resolved_promise.then(flush))}function add_render_callback(n){render_callbacks.push(n)}const seen_callbacks=new Set;let flushidx=0;function flush(){if(flushidx!==0)return;const n=current_component;do{try{for(;flushidx<dirty_components.length;){const e=dirty_components[flushidx];flushidx++,set_current_component(e),update(e.$$)}}catch(e){throw dirty_components.length=0,flushidx=0,e}for(set_current_component(null),dirty_components.length=0,flushidx=0;binding_callbacks.length;)binding_callbacks.pop()();for(let e=0;e<render_callbacks.length;e+=1){const t=render_callbacks[e];seen_callbacks.has(t)||(seen_callbacks.add(t),t())}render_callbacks.length=0}while(dirty_components.length);for(;flush_callbacks.length;)flush_callbacks.pop()();update_scheduled=!1,seen_callbacks.clear(),set_current_component(n)}function update(n){if(n.fragment!==null){n.update(),run_all(n.before_update);const e=n.dirty;n.dirty=[-1],n.fragment&&n.fragment.p(n.ctx,e),n.after_update.forEach(add_render_callback)}}function flush_render_callbacks(n){const e=[],t=[];render_callbacks.forEach(r=>n.indexOf(r)===-1?e.push(r):t.push(r)),t.forEach(r=>r()),render_callbacks=e}let promise;function wait(){return promise||(promise=Promise.resolve(),promise.then(()=>{promise=null})),promise}function dispatch(n,e,t){n.dispatchEvent(custom_event(`${e?"intro":"outro"}${t}`))}const outroing=new Set;let outros;function group_outros(){outros={r:0,c:[],p:outros}}function check_outros(){outros.r||run_all(outros.c),outros=outros.p}function transition_in(n,e){n&&n.i&&(outroing.delete(n),n.i(e))}function transition_out(n,e,t,r){if(n&&n.o){if(outroing.has(n))return;outroing.add(n),outros.c.push(()=>{outroing.delete(n),r&&(t&&n.d(1),r())}),n.o(e)}else r&&r()}const null_transition={duration:0};function create_in_transition(n,e,t){const r={direction:"in"};let i=e(n,t,r),a=!1,o,s,c=0;function l(){o&&delete_rule(n,o)}function d(){const{delay:f=0,duration:_=300,easing:p=identity,tick:y=noop,css:g}=i||null_transition;g&&(o=create_rule(n,0,1,_,f,p,g,c++)),y(0,1);const h=now()+f,P=h+_;s&&s.abort(),a=!0,add_render_callback(()=>dispatch(n,!0,"start")),s=loop(v=>{if(a){if(v>=P)return y(1,0),dispatch(n,!0,"end"),l(),a=!1;if(v>=h){const m=p((v-h)/_);y(m,1-m)}}return a})}let u=!1;return{start(){u||(u=!0,delete_rule(n),is_function(i)?(i=i(r),wait().then(d)):d())},invalidate(){u=!1},end(){a&&(l(),a=!1)}}}function create_out_transition(n,e,t){const r={direction:"out"};let i=e(n,t,r),a=!0,o;const s=outros;s.r+=1;function c(){const{delay:l=0,duration:d=300,easing:u=identity,tick:f=noop,css:_}=i||null_transition;_&&(o=create_rule(n,1,0,d,l,u,_));const p=now()+l,y=p+d;add_render_callback(()=>dispatch(n,!1,"start")),loop(g=>{if(a){if(g>=y)return f(0,1),dispatch(n,!1,"end"),--s.r||run_all(s.c),!1;if(g>=p){const h=u((g-p)/d);f(1-h,h)}}return a})}return is_function(i)?wait().then(()=>{i=i(r),c()}):c(),{end(l){l&&i.tick&&i.tick(1,0),a&&(o&&delete_rule(n,o),a=!1)}}}function create_bidirectional_transition(n,e,t,r){const i={direction:"both"};let a=e(n,t,i),o=r?0:1,s=null,c=null,l=null;function d(){l&&delete_rule(n,l)}function u(_,p){const y=_.b-o;return p*=Math.abs(y),{a:o,b:_.b,d:y,duration:p,start:_.start,end:_.start+p,group:_.group}}function f(_){const{delay:p=0,duration:y=300,easing:g=identity,tick:h=noop,css:P}=a||null_transition,v={start:now()+p,b:_};_||(v.group=outros,outros.r+=1),s||c?c=v:(P&&(d(),l=create_rule(n,o,_,y,p,g,P)),_&&h(0,1),s=u(v,y),add_render_callback(()=>dispatch(n,_,"start")),loop(m=>{if(c&&m>c.start&&(s=u(c,y),c=null,dispatch(n,s.b,"start"),P&&(d(),l=create_rule(n,o,s.b,s.duration,0,g,a.css))),s){if(m>=s.end)h(o=s.b,1-o),dispatch(n,s.b,"end"),c||(s.b?d():--s.group.r||run_all(s.group.c)),s=null;else if(m>=s.start){const A=m-s.start;o=s.a+s.d*g(A/s.duration),h(o,1-o)}}return!!(s||c)}))}return{run(_){is_function(a)?wait().then(()=>{a=a(i),f(_)}):f(_)},end(){d(),s=c=null}}}function outro_and_destroy_block(n,e){transition_out(n,1,1,()=>{e.delete(n.key)})}function update_keyed_each(n,e,t,r,i,a,o,s,c,l,d,u){let f=n.length,_=a.length,p=f;const y={};for(;p--;)y[n[p].key]=p;const g=[],h=new Map,P=new Map,v=[];for(p=_;p--;){const S=u(i,a,p),b=t(S);let G=o.get(b);G?r&&v.push(()=>G.p(S,e)):(G=l(b,S),G.c()),h.set(b,g[p]=G),b in y&&P.set(b,Math.abs(p-y[b]))}const m=new Set,A=new Set;function E(S){transition_in(S,1),S.m(s,d),o.set(S.key,S),d=S.first,_--}for(;f&&_;){const S=g[_-1],b=n[f-1],G=S.key,T=b.key;S===b?(d=S.first,f--,_--):h.has(T)?!o.has(G)||m.has(G)?E(S):A.has(T)?f--:P.get(G)>P.get(T)?(A.add(G),E(S)):(m.add(T),f--):(c(b,o),f--)}for(;f--;){const S=n[f];h.has(S.key)||c(S,o)}for(;_;)E(g[_-1]);return run_all(v),g}function create_component(n){n&&n.c()}function claim_component(n,e){n&&n.l(e)}function mount_component(n,e,t,r){const{fragment:i,after_update:a}=n.$$;i&&i.m(e,t),r||add_render_callback(()=>{const o=n.$$.on_mount.map(run).filter(is_function);n.$$.on_destroy?n.$$.on_destroy.push(...o):run_all(o),n.$$.on_mount=[]}),a.forEach(add_render_callback)}function destroy_component(n,e){const t=n.$$;t.fragment!==null&&(flush_render_callbacks(t.after_update),run_all(t.on_destroy),t.fragment&&t.fragment.d(e),t.on_destroy=t.fragment=null,t.ctx=[])}function make_dirty(n,e){n.$$.dirty[0]===-1&&(dirty_components.push(n),schedule_update(),n.$$.dirty.fill(0)),n.$$.dirty[e/31|0]|=1<<e%31}function init(n,e,t,r,i,a,o,s=[-1]){const c=current_component;set_current_component(n);const l=n.$$={fragment:null,ctx:[],props:a,update:noop,not_equal:i,bound:blank_object(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(e.context||(c?c.$$.context:[])),callbacks:blank_object(),dirty:s,skip_bound:!1,root:e.target||c.$$.root};o&&o(l.root);let d=!1;if(l.ctx=t?t(n,e.props||{},(u,f,..._)=>{const p=_.length?_[0]:f;return l.ctx&&i(l.ctx[u],l.ctx[u]=p)&&(!l.skip_bound&&l.bound[u]&&l.bound[u](p),d&&make_dirty(n,u)),f}):[],l.update(),d=!0,run_all(l.before_update),l.fragment=r?r(l.ctx):!1,e.target){if(e.hydrate){start_hydrating();const u=children(e.target);l.fragment&&l.fragment.l(u),u.forEach(detach)}else l.fragment&&l.fragment.c();e.intro&&transition_in(n.$$.fragment),mount_component(n,e.target,e.anchor,e.customElement),end_hydrating(),flush()}set_current_component(c)}class SvelteComponent{$destroy(){destroy_component(this,1),this.$destroy=noop}$on(e,t){if(!is_function(t))return noop;const r=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return r.push(t),()=>{const i=r.indexOf(t);i!==-1&&r.splice(i,1)}}$set(e){this.$$set&&!is_empty(e)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}}function cubicOut(n){const e=n-1;return e*e*e+1}function fade(n,{delay:e=0,duration:t=400,easing:r=identity}={}){const i=+getComputedStyle(n).opacity;return{delay:e,duration:t,easing:r,css:a=>`opacity: ${a*i}`}}function fly(n,{delay:e=0,duration:t=400,easing:r=cubicOut,x:i=0,y:a=0,opacity:o=0}={}){const s=getComputedStyle(n),c=+s.opacity,l=s.transform==="none"?"":s.transform,d=c*(1-o),[u,f]=split_css_unit(i),[_,p]=split_css_unit(a);return{delay:e,duration:t,easing:r,css:(y,g)=>`
			transform: ${l} translate(${(1-y)*u}${f}, ${(1-y)*_}${p});
			opacity: ${c-d*g}`}}function slide(n,{delay:e=0,duration:t=400,easing:r=cubicOut,axis:i="y"}={}){const a=getComputedStyle(n),o=+a.opacity,s=i==="y"?"height":"width",c=parseFloat(a[s]),l=i==="y"?["top","bottom"]:["left","right"],d=l.map(h=>`${h[0].toUpperCase()}${h.slice(1)}`),u=parseFloat(a[`padding${d[0]}`]),f=parseFloat(a[`padding${d[1]}`]),_=parseFloat(a[`margin${d[0]}`]),p=parseFloat(a[`margin${d[1]}`]),y=parseFloat(a[`border${d[0]}Width`]),g=parseFloat(a[`border${d[1]}Width`]);return{delay:e,duration:t,easing:r,css:h=>`overflow: hidden;opacity: ${Math.min(h*20,1)*o};${s}: ${h*c}px;padding-${l[0]}: ${h*u}px;padding-${l[1]}: ${h*f}px;margin-${l[0]}: ${h*_}px;margin-${l[1]}: ${h*p}px;border-${l[0]}-width: ${h*y}px;border-${l[1]}-width: ${h*g}px;`}}const app$1="";var extendStatics=function(n,e){return extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,r){t.__proto__=r}||function(t,r){for(var i in r)Object.prototype.hasOwnProperty.call(r,i)&&(t[i]=r[i])},extendStatics(n,e)};function __extends(n,e){if(typeof e!="function"&&e!==null)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");extendStatics(n,e);function t(){this.constructor=n}n.prototype=e===null?Object.create(e):(t.prototype=e.prototype,new t)}var __assign=function(){return __assign=Object.assign||function(e){for(var t,r=1,i=arguments.length;r<i;r++){t=arguments[r];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},__assign.apply(this,arguments)};function __rest(n,e){var t={};for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&e.indexOf(r)<0&&(t[r]=n[r]);if(n!=null&&typeof Object.getOwnPropertySymbols=="function")for(var i=0,r=Object.getOwnPropertySymbols(n);i<r.length;i++)e.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(n,r[i])&&(t[r[i]]=n[r[i]]);return t}function __decorate(n,e,t,r){var i=arguments.length,a=i<3?e:r===null?r=Object.getOwnPropertyDescriptor(e,t):r,o;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")a=Reflect.decorate(n,e,t,r);else for(var s=n.length-1;s>=0;s--)(o=n[s])&&(a=(i<3?o(a):i>3?o(e,t,a):o(e,t))||a);return i>3&&a&&Object.defineProperty(e,t,a),a}function __param(n,e){return function(t,r){e(t,r,n)}}function __esDecorate(n,e,t,r,i,a){function o(h){if(h!==void 0&&typeof h!="function")throw new TypeError("Function expected");return h}for(var s=r.kind,c=s==="getter"?"get":s==="setter"?"set":"value",l=!e&&n?r.static?n:n.prototype:null,d=e||(l?Object.getOwnPropertyDescriptor(l,r.name):{}),u,f=!1,_=t.length-1;_>=0;_--){var p={};for(var y in r)p[y]=y==="access"?{}:r[y];for(var y in r.access)p.access[y]=r.access[y];p.addInitializer=function(h){if(f)throw new TypeError("Cannot add initializers after decoration has completed");a.push(o(h||null))};var g=(0,t[_])(s==="accessor"?{get:d.get,set:d.set}:d[c],p);if(s==="accessor"){if(g===void 0)continue;if(g===null||typeof g!="object")throw new TypeError("Object expected");(u=o(g.get))&&(d.get=u),(u=o(g.set))&&(d.set=u),(u=o(g.init))&&i.unshift(u)}else(u=o(g))&&(s==="field"?i.unshift(u):d[c]=u)}l&&Object.defineProperty(l,r.name,d),f=!0}function __runInitializers(n,e,t){for(var r=arguments.length>2,i=0;i<e.length;i++)t=r?e[i].call(n,t):e[i].call(n);return r?t:void 0}function __propKey(n){return typeof n=="symbol"?n:"".concat(n)}function __setFunctionName(n,e,t){return typeof e=="symbol"&&(e=e.description?"[".concat(e.description,"]"):""),Object.defineProperty(n,"name",{configurable:!0,value:t?"".concat(t," ",e):e})}function __metadata(n,e){if(typeof Reflect=="object"&&typeof Reflect.metadata=="function")return Reflect.metadata(n,e)}function __awaiter(n,e,t,r){function i(a){return a instanceof t?a:new t(function(o){o(a)})}return new(t||(t=Promise))(function(a,o){function s(d){try{l(r.next(d))}catch(u){o(u)}}function c(d){try{l(r.throw(d))}catch(u){o(u)}}function l(d){d.done?a(d.value):i(d.value).then(s,c)}l((r=r.apply(n,e||[])).next())})}function __generator(n,e){var t={label:0,sent:function(){if(a[0]&1)throw a[1];return a[1]},trys:[],ops:[]},r,i,a,o=Object.create((typeof Iterator=="function"?Iterator:Object).prototype);return o.next=s(0),o.throw=s(1),o.return=s(2),typeof Symbol=="function"&&(o[Symbol.iterator]=function(){return this}),o;function s(l){return function(d){return c([l,d])}}function c(l){if(r)throw new TypeError("Generator is already executing.");for(;o&&(o=0,l[0]&&(t=0)),t;)try{if(r=1,i&&(a=l[0]&2?i.return:l[0]?i.throw||((a=i.return)&&a.call(i),0):i.next)&&!(a=a.call(i,l[1])).done)return a;switch(i=0,a&&(l=[l[0]&2,a.value]),l[0]){case 0:case 1:a=l;break;case 4:return t.label++,{value:l[1],done:!1};case 5:t.label++,i=l[1],l=[0];continue;case 7:l=t.ops.pop(),t.trys.pop();continue;default:if(a=t.trys,!(a=a.length>0&&a[a.length-1])&&(l[0]===6||l[0]===2)){t=0;continue}if(l[0]===3&&(!a||l[1]>a[0]&&l[1]<a[3])){t.label=l[1];break}if(l[0]===6&&t.label<a[1]){t.label=a[1],a=l;break}if(a&&t.label<a[2]){t.label=a[2],t.ops.push(l);break}a[2]&&t.ops.pop(),t.trys.pop();continue}l=e.call(n,t)}catch(d){l=[6,d],i=0}finally{r=a=0}if(l[0]&5)throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}}var __createBinding=Object.create?function(n,e,t,r){r===void 0&&(r=t);var i=Object.getOwnPropertyDescriptor(e,t);(!i||("get"in i?!e.__esModule:i.writable||i.configurable))&&(i={enumerable:!0,get:function(){return e[t]}}),Object.defineProperty(n,r,i)}:function(n,e,t,r){r===void 0&&(r=t),n[r]=e[t]};function __exportStar(n,e){for(var t in n)t!=="default"&&!Object.prototype.hasOwnProperty.call(e,t)&&__createBinding(e,n,t)}function __values(n){var e=typeof Symbol=="function"&&Symbol.iterator,t=e&&n[e],r=0;if(t)return t.call(n);if(n&&typeof n.length=="number")return{next:function(){return n&&r>=n.length&&(n=void 0),{value:n&&n[r++],done:!n}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function __read(n,e){var t=typeof Symbol=="function"&&n[Symbol.iterator];if(!t)return n;var r=t.call(n),i,a=[],o;try{for(;(e===void 0||e-- >0)&&!(i=r.next()).done;)a.push(i.value)}catch(s){o={error:s}}finally{try{i&&!i.done&&(t=r.return)&&t.call(r)}finally{if(o)throw o.error}}return a}function __spread(){for(var n=[],e=0;e<arguments.length;e++)n=n.concat(__read(arguments[e]));return n}function __spreadArrays(){for(var n=0,e=0,t=arguments.length;e<t;e++)n+=arguments[e].length;for(var r=Array(n),i=0,e=0;e<t;e++)for(var a=arguments[e],o=0,s=a.length;o<s;o++,i++)r[i]=a[o];return r}function __spreadArray(n,e,t){if(t||arguments.length===2)for(var r=0,i=e.length,a;r<i;r++)(a||!(r in e))&&(a||(a=Array.prototype.slice.call(e,0,r)),a[r]=e[r]);return n.concat(a||Array.prototype.slice.call(e))}function __await(n){return this instanceof __await?(this.v=n,this):new __await(n)}function __asyncGenerator(n,e,t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r=t.apply(n,e||[]),i,a=[];return i=Object.create((typeof AsyncIterator=="function"?AsyncIterator:Object).prototype),s("next"),s("throw"),s("return",o),i[Symbol.asyncIterator]=function(){return this},i;function o(_){return function(p){return Promise.resolve(p).then(_,u)}}function s(_,p){r[_]&&(i[_]=function(y){return new Promise(function(g,h){a.push([_,y,g,h])>1||c(_,y)})},p&&(i[_]=p(i[_])))}function c(_,p){try{l(r[_](p))}catch(y){f(a[0][3],y)}}function l(_){_.value instanceof __await?Promise.resolve(_.value.v).then(d,u):f(a[0][2],_)}function d(_){c("next",_)}function u(_){c("throw",_)}function f(_,p){_(p),a.shift(),a.length&&c(a[0][0],a[0][1])}}function __asyncDelegator(n){var e,t;return e={},r("next"),r("throw",function(i){throw i}),r("return"),e[Symbol.iterator]=function(){return this},e;function r(i,a){e[i]=n[i]?function(o){return(t=!t)?{value:__await(n[i](o)),done:!1}:a?a(o):o}:a}}function __asyncValues(n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e=n[Symbol.asyncIterator],t;return e?e.call(n):(n=typeof __values=="function"?__values(n):n[Symbol.iterator](),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(a){t[a]=n[a]&&function(o){return new Promise(function(s,c){o=n[a](o),i(s,c,o.done,o.value)})}}function i(a,o,s,c){Promise.resolve(c).then(function(l){a({value:l,done:s})},o)}}function __makeTemplateObject(n,e){return Object.defineProperty?Object.defineProperty(n,"raw",{value:e}):n.raw=e,n}var __setModuleDefault=Object.create?function(n,e){Object.defineProperty(n,"default",{enumerable:!0,value:e})}:function(n,e){n.default=e};function __importStar(n){if(n&&n.__esModule)return n;var e={};if(n!=null)for(var t in n)t!=="default"&&Object.prototype.hasOwnProperty.call(n,t)&&__createBinding(e,n,t);return __setModuleDefault(e,n),e}function __importDefault(n){return n&&n.__esModule?n:{default:n}}function __classPrivateFieldGet(n,e,t,r){if(t==="a"&&!r)throw new TypeError("Private accessor was defined without a getter");if(typeof e=="function"?n!==e||!r:!e.has(n))throw new TypeError("Cannot read private member from an object whose class did not declare it");return t==="m"?r:t==="a"?r.call(n):r?r.value:e.get(n)}function __classPrivateFieldSet(n,e,t,r,i){if(r==="m")throw new TypeError("Private method is not writable");if(r==="a"&&!i)throw new TypeError("Private accessor was defined without a setter");if(typeof e=="function"?n!==e||!i:!e.has(n))throw new TypeError("Cannot write private member to an object whose class did not declare it");return r==="a"?i.call(n,t):i?i.value=t:e.set(n,t),t}function __classPrivateFieldIn(n,e){if(e===null||typeof e!="object"&&typeof e!="function")throw new TypeError("Cannot use 'in' operator on non-object");return typeof n=="function"?e===n:n.has(e)}function __addDisposableResource(n,e,t){if(e!=null){if(typeof e!="object"&&typeof e!="function")throw new TypeError("Object expected.");var r,i;if(t){if(!Symbol.asyncDispose)throw new TypeError("Symbol.asyncDispose is not defined.");r=e[Symbol.asyncDispose]}if(r===void 0){if(!Symbol.dispose)throw new TypeError("Symbol.dispose is not defined.");r=e[Symbol.dispose],t&&(i=r)}if(typeof r!="function")throw new TypeError("Object not disposable.");i&&(r=function(){try{i.call(this)}catch(a){return Promise.reject(a)}}),n.stack.push({value:e,dispose:r,async:t})}else t&&n.stack.push({async:!0});return e}var _SuppressedError=typeof SuppressedError=="function"?SuppressedError:function(n,e,t){var r=new Error(t);return r.name="SuppressedError",r.error=n,r.suppressed=e,r};function __disposeResources(n){function e(a){n.error=n.hasError?new _SuppressedError(a,n.error,"An error was suppressed during disposal."):a,n.hasError=!0}var t,r=0;function i(){for(;t=n.stack.pop();)try{if(!t.async&&r===1)return r=0,n.stack.push(t),Promise.resolve().then(i);if(t.dispose){var a=t.dispose.call(t.value);if(t.async)return r|=2,Promise.resolve(a).then(i,function(o){return e(o),i()})}else r|=1}catch(o){e(o)}if(r===1)return n.hasError?Promise.reject(n.error):Promise.resolve();if(n.hasError)throw n.error}return i()}const tslib_es6={__extends,__assign,__rest,__decorate,__param,__metadata,__awaiter,__generator,__createBinding,__exportStar,__values,__read,__spread,__spreadArrays,__spreadArray,__await,__asyncGenerator,__asyncDelegator,__asyncValues,__makeTemplateObject,__importStar,__importDefault,__classPrivateFieldGet,__classPrivateFieldSet,__classPrivateFieldIn,__addDisposableResource,__disposeResources},tslib_es6$1=Object.freeze(Object.defineProperty({__proto__:null,__extends,get __assign(){return __assign},__rest,__decorate,__param,__esDecorate,__runInitializers,__propKey,__setFunctionName,__metadata,__awaiter,__generator,__createBinding,__exportStar,__values,__read,__spread,__spreadArrays,__spreadArray,__await,__asyncGenerator,__asyncDelegator,__asyncValues,__makeTemplateObject,__importStar,__importDefault,__classPrivateFieldGet,__classPrivateFieldSet,__classPrivateFieldIn,__addDisposableResource,__disposeResources,default:tslib_es6},Symbol.toStringTag,{value:"Module"}));function create_fragment$6(n){let e,t,r,i;return{c(){e=svg_element("svg"),t=svg_element("circle"),r=svg_element("line"),i=svg_element("line"),this.h()},l(a){e=claim_svg_element(a,"svg",{xmlns:!0,width:!0,height:!0,viewBox:!0,fill:!0,stroke:!0,"stroke-width":!0,"stroke-linecap":!0,"stroke-linejoin":!0,class:!0});var o=children(e);t=claim_svg_element(o,"circle",{cx:!0,cy:!0,r:!0});var s=children(t);s.forEach(detach),r=claim_svg_element(o,"line",{x1:!0,y1:!0,x2:!0,y2:!0});var c=children(r);c.forEach(detach),i=claim_svg_element(o,"line",{x1:!0,y1:!0,x2:!0,y2:!0});var l=children(i);l.forEach(detach),o.forEach(detach),this.h()},h(){attr(t,"cx","12"),attr(t,"cy","12"),attr(t,"r","10"),attr(r,"x1","12"),attr(r,"y1","8"),attr(r,"x2","12"),attr(r,"y2","16"),attr(i,"x1","8"),attr(i,"y1","12"),attr(i,"x2","16"),attr(i,"y2","12"),attr(e,"xmlns","http://www.w3.org/2000/svg"),attr(e,"width","100%"),attr(e,"height","100%"),attr(e,"viewBox","0 0 24 24"),attr(e,"fill","none"),attr(e,"stroke",n[0]),attr(e,"stroke-width","2"),attr(e,"stroke-linecap","round"),attr(e,"stroke-linejoin","round"),attr(e,"class","svg-icon lucide-plus-circle")},m(a,o){insert_hydration(a,e,o),append_hydration(e,t),append_hydration(e,r),append_hydration(e,i)},p(a,[o]){o&1&&attr(e,"stroke",a[0])},i:noop,o:noop,d(a){a&&detach(e)}}}function instance$6(n,e,t){let{color:r="black"}=e;return n.$$set=i=>{"color"in i&&t(0,r=i.color)},[r]}class Plus extends SvelteComponent{constructor(e){super(),init(this,e,instance$6,create_fragment$6,safe_not_equal,{color:0})}}function get_each_context$1(n,e,t){const r=n.slice();return r[16]=e[t],r[17]=e,r[18]=t,r}function create_each_block$1(n,e){let t,r,i=e[16].name+"",a,o,s,c,l,d;function u(){e[10].call(r,e[17],e[18])}function f(){return e[11](e[16])}return{key:n,first:null,c(){t=element("div"),r=element("div"),a=text(i),this.h()},l(_){t=claim_element(_,"DIV",{class:!0,"data-selected":!0,"data-can-hover":!0});var p=children(t);r=claim_element(p,"DIV",{tabindex:!0,class:!0,contenteditable:!0});var y=children(r);a=claim_text(y,i),y.forEach(detach),p.forEach(detach),this.h()},h(){attr(r,"tabindex","-1"),attr(r,"class","Editable_column"),attr(r,"contenteditable","false"),e[16].name===void 0&&add_render_callback(u),attr(t,"class","Editable_row"),attr(t,"data-selected",o=e[16].isSelected),attr(t,"data-can-hover",!0),this.first=t},m(_,p){insert_hydration(_,t,p),append_hydration(t,r),append_hydration(r,a),e[16].name!==void 0&&(r.textContent=e[16].name),c=!0,l||(d=[listen(r,"input",u),listen(r,"click",f),listen(r,"keyup",e[9])],l=!0)},p(_,p){e=_,(!c||p&4)&&i!==(i=e[16].name+"")&&set_data_maybe_contenteditable(a,i,"false"),p&4&&e[16].name!==r.textContent&&(r.textContent=e[16].name),(!c||p&4&&o!==(o=e[16].isSelected))&&attr(t,"data-selected",o)},i(_){c||(add_render_callback(()=>{!c||(s||(s=create_bidirectional_transition(t,slide,{},!0)),s.run(1))}),c=!0)},o(_){s||(s=create_bidirectional_transition(t,slide,{},!1)),s.run(0),c=!1},d(_){_&&detach(t),_&&s&&s.end(),l=!1,run_all(d)}}}function create_if_block$1(n){let e,t,r,i,a,o,s;return r=new Plus({props:{color:"#fff"}}),{c(){e=element("div"),t=element("div"),create_component(r.$$.fragment),this.h()},l(c){e=claim_element(c,"DIV",{class:!0,"data-selected":!0,"data-can-hover":!0,style:!0});var l=children(e);t=claim_element(l,"DIV",{tabindex:!0,class:!0,contenteditable:!0});var d=children(t);claim_component(r.$$.fragment,d),d.forEach(detach),l.forEach(detach),this.h()},h(){attr(t,"tabindex","-1"),attr(t,"class","Editable_Icon"),attr(t,"contenteditable","false"),attr(e,"class","Editable_row Editable_rowPlusButton"),attr(e,"data-selected",!1),attr(e,"data-can-hover",!0),set_style(e,"display","flex"),set_style(e,"justify-content","center")},m(c,l){insert_hydration(c,e,l),append_hydration(e,t),mount_component(r,t,null),a=!0,o||(s=[listen(e,"click",n[12]),listen(e,"keyup",n[13])],o=!0)},p:noop,i(c){a||(transition_in(r.$$.fragment,c),add_render_callback(()=>{!a||(i||(i=create_bidirectional_transition(e,slide,{},!0)),i.run(1))}),a=!0)},o(c){transition_out(r.$$.fragment,c),i||(i=create_bidirectional_transition(e,slide,{},!1)),i.run(0),a=!1},d(c){c&&detach(e),destroy_component(r),c&&i&&i.end(),o=!1,run_all(s)}}}function create_fragment$5(n){let e,t=[],r=new Map,i,a,o,s=n[2];const c=d=>d[16].key;for(let d=0;d<s.length;d+=1){let u=get_each_context$1(n,s,d),f=c(u);r.set(f,t[d]=create_each_block$1(f,u))}let l=n[1]!=null&&create_if_block$1(n);return{c(){e=element("div");for(let d=0;d<t.length;d+=1)t[d].c();i=space(),l&&l.c(),this.h()},l(d){e=claim_element(d,"DIV",{class:!0});var u=children(e);for(let f=0;f<t.length;f+=1)t[f].l(u);i=claim_space(u),l&&l.l(u),u.forEach(detach),this.h()},h(){attr(e,"class",a=n[0]?"GrobsInteractiveContainer editableTable":"editableTable")},m(d,u){insert_hydration(d,e,u);for(let f=0;f<t.length;f+=1)t[f]&&t[f].m(e,null);append_hydration(e,i),l&&l.m(e,null),o=!0},p(d,[u]){u&12&&(s=d[2],group_outros(),t=update_keyed_each(t,u,c,1,d,s,r,e,outro_and_destroy_block,create_each_block$1,i,get_each_context$1),check_outros()),d[1]!=null?l?(l.p(d,u),u&2&&transition_in(l,1)):(l=create_if_block$1(d),l.c(),transition_in(l,1),l.m(e,null)):l&&(group_outros(),transition_out(l,1,1,()=>{l=null}),check_outros()),(!o||u&1&&a!==(a=d[0]?"GrobsInteractiveContainer editableTable":"editableTable"))&&attr(e,"class",a)},i(d){if(!o){for(let u=0;u<s.length;u+=1)transition_in(t[u]);transition_in(l),o=!0}},o(d){for(let u=0;u<t.length;u+=1)transition_out(t[u]);transition_out(l),o=!1},d(d){d&&detach(e);for(let u=0;u<t.length;u+=1)t[u].d();l&&l.d()}}}function instance$5(n,e,t){let r,{isEditableContainer:i=!0}=e,{collection:a}=e,{onSelect:o}=e,{onAdd:s=null}=e;const c=createEventDispatcher();let l=null;function d(){if(!l)return;let v=r.findIndex(m=>m.isSelected);v!=-1&&t(2,r[v].isSelected=!1,r),l=null,c("onDeSelect")}function u(v){let m=r.find(A=>A.key==v);m&&f(m)}function f(v){let m=r.findIndex(E=>E.isSelected);if(m!=-1&&r[m].key==v.key){t(2,r[m].isSelected=!1,r),l=null,c("onDeSelect");return}m!=-1&&t(2,r[m].isSelected=!1,r),m=r.findIndex(E=>E.key==v.key);const A=o(r[m].key);A?l=r[m]:l=null,t(2,r[m].isSelected=A,r)}function _(){!s||(d(),s())}function p(v){bubble.call(this,n,v)}function y(v,m){v[m].name=this.textContent,t(2,r),t(5,a)}const g=v=>f(v),h=()=>_(),P=()=>_();return n.$$set=v=>{"isEditableContainer"in v&&t(0,i=v.isEditableContainer),"collection"in v&&t(5,a=v.collection),"onSelect"in v&&t(6,o=v.onSelect),"onAdd"in v&&t(1,s=v.onAdd)},n.$$.update=()=>{n.$$.dirty&32&&t(2,r=a.map(v=>{var m;return v.key&&v.value?{key:v.key,name:v.value,isSelected:(m=v.isSelected)!==null&&m!==void 0?m:!1,nameEdit:v.value}:{key:v,name:v,isSelected:!1,nameEdit:v}}))},[i,s,r,f,_,a,o,d,u,p,y,g,h,P]}class EditAbleList extends SvelteComponent{constructor(e){super(),init(this,e,instance$5,create_fragment$5,safe_not_equal,{isEditableContainer:0,collection:5,onSelect:6,onAdd:1,deselect:7,select:8})}get deselect(){return this.$$.ctx[7]}get select(){return this.$$.ctx[8]}}const subscriber_queue=[];function writable(n,e=noop){let t;const r=new Set;function i(s){if(safe_not_equal(n,s)&&(n=s,t)){const c=!subscriber_queue.length;for(const l of r)l[1](),subscriber_queue.push(l,n);if(c){for(let l=0;l<subscriber_queue.length;l+=2)subscriber_queue[l][0](subscriber_queue[l+1]);subscriber_queue.length=0}}}function a(s){i(s(n))}function o(s,c=noop){const l=[s,c];return r.add(l),r.size===1&&(t=e(i)||noop),s(n),()=>{r.delete(l),r.size===0&&t&&(t(),t=null)}}return{set:i,update:a,subscribe:o}}var BASE_SCHEME="_base",NoOutput={outError:function(n){},outLog:function(n){}},JSON_TAGS;(function(n){n.JSON_PROPERTY="JSON_PROPERTY",n.JSON_PROPERTY_TYPED="JSON_PROPERTY_TYPED",n.JSON_PROPERTY_TYPED_SKIP_FORCED="JSON_PROPERTY_TYPED_SKIP_FORCED",n.JSON_PROPERTY_NAME_MAP_IN="JSON_PROPERTY_NAME_MAP_IN",n.JSON_PROPERTY_NAME_MAP_OUT="JSON_PROPERTY_NAME_MAP_OUT",n.JSON_PROPERTY_FUNC_MAP_IN="JSON_PROPERTY_FUNC_MAP_IN",n.JSON_PROPERTY_FUNC_MAP_OUT="JSON_PROPERTY_FUNC_MAP_OUT",n.JSON_PROPERTY_FORCE_BASE_TYPE="JSON_PROPERTY_FORCE_BASE_TYPE",n.JSON_PROPERTY_FORCE_ARRAY="JSON_PROPERTY_FORCE_ARRAY",n.JSON_OBJECT_ON_AFTER_DE_SERIALIZATION="JSON_OBJECT_ON_AFTER_DE_SERIALIZATION",n.JSON_OBJECT_ON_AFTER_SERIALIZATION_BEFORE_STRING="JSON_OBJECT_ON_AFTER_SERIALIZATION_BEFORE_STRING",n.JSON_OBJECT_ON_AFTER_SERIALIZATION="JSON_OBJECT_ON_AFTER_SERIALIZATION",n.JSON_OBJECT_ON_BEFORE_SERIALIZATION="JSON_OBJECT_ON_BEFORE_SERIALIZATION",n.JSON_OBJECT_ON_BEFORE_DE_SERIALIZATION="JSON_OBJECT_ON_BEFORE_DE_SERIALIZATION"})(JSON_TAGS||(JSON_TAGS={}));var JSON_BASETYPES;(function(n){n.string="string",n.bool="bool",n.number="number"})(JSON_BASETYPES||(JSON_BASETYPES={}));function createGuid(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(n){var e=Math.random()*16|0,t=n=="x"?e:e&3|8;return t.toString(16)})}var selfKey=createGuid()+"SELF",Reflect$1=function(){function n(){}return n.getPrototype=function(e){var t;return typeof e=="function"?t=e.prototype:t=e.constructor.prototype,t},n.setPrototype=function(e,t){if(typeof e=="function")throw new Error("Not Implemented Error, please report the scenario to me");Object.setPrototypeOf(e,t)},n.getOrCreateAllMetaData=function(e,t){t===void 0&&(t=!1);var r=n.getPrototype(e);if(r===Object.prototype||r==null)return null;var i=r;if(!i.gjmd){if(!t)return null;i.gjmd={}}if(i=i.gjmd,!i[r.constructor.name]){if(!t)return null;i[r.constructor.name]={}}return i=i[r.constructor.name],i},n.getOrCreateDefinedMetaData=function(e,t,r){r===void 0&&(r=!1);var i=n.getOrCreateAllMetaData(e,r);if(!i)return null;if(!i[t]){if(!r)return null;i[t]={}}return i[t]},n.getMetadataKeys=function(e,t,r){r===void 0&&(r=BASE_SCHEME);var i=n.getOrCreateDefinedMetaData(e,r);return!i||!i[t]?[]:Object.keys(i[t])},n.getOwnMetaDataKeys=function(e,t){return t===void 0&&(t=BASE_SCHEME),n.getMetadataKeys(e,selfKey,t)},n.getMetadata=function(e,t,r,i){var a;i===void 0&&(i=BASE_SCHEME);var o=n.getOrCreateDefinedMetaData(t,i);return o[r]&&(a=o[r][e])!==null&&a!==void 0?a:null},n.getOwnMetaData=function(e,t,r){return r===void 0&&(r=BASE_SCHEME),n.getMetadata(e,t,selfKey,r)},n.defineMetaData=function(e,t,r,i,a){a===void 0&&(a=BASE_SCHEME);var o=n.getOrCreateDefinedMetaData(r,a,!0);o[i]||(o[i]={}),o[i][e]=t},n.defineOwnMetaData=function(e,t,r,i){return i===void 0&&(i=BASE_SCHEME),n.defineMetaData(e,t,r,selfKey,i)},n.hasMetaData=function(e,t,r,i){var a;i===void 0&&(i=BASE_SCHEME);var o=n.getOrCreateDefinedMetaData(t,i);return o==null||!o[r]?!1:(a=o[r][e])!==null&&a!==void 0?a:!1},n.hasOwnMetaData=function(e,t,r){return r===void 0&&(r=BASE_SCHEME),n.hasMetaData(e,t,selfKey,r)},n.getAllMeta=function(e,t){return t?n.getOrCreateDefinedMetaData(e,t):n.getOrCreateAllMetaData(e,!0)},n}();function getMetadata(n,e,t,r){return r===void 0&&(r=BASE_SCHEME),Reflect$1.getMetadata(n,e,t,r)}function getOwnMetaData(n,e,t){return t===void 0&&(t=BASE_SCHEME),Reflect$1.getOwnMetaData(n,e,t)}function setMetadata(n,e,t,r,i){i===void 0&&(i=BASE_SCHEME),Reflect$1.defineMetaData(n,e,t,r,i)}function setOwnMetaData(n,e,t,r){r===void 0&&(r=BASE_SCHEME),Reflect$1.defineOwnMetaData(n,t,e,r)}function getOwnMetaDataKeys(n,e){e===void 0&&(e=BASE_SCHEME);var t=Reflect$1.getOwnMetaDataKeys(n,e);return t}function getMetaDataKeys(n,e,t){t===void 0&&(t=BASE_SCHEME);var r=Reflect$1.getMetadataKeys(n,e,t);return r}function hasMetaData(n,e){var t=Reflect$1.getAllMeta(n,e);return!!t}function getPrototype(n){return Reflect$1.getPrototype(n)}function setPrototype(n,e){return Reflect$1.setPrototype(n,e),Reflect$1.getPrototype(n)==e}function cleanNonAccesibleSettings(n){return n?((!n.scheme||n.scheme.length==0)&&(n.scheme=[BASE_SCHEME]),n.mappingFunctions=null,n.type=null,n.isArray=null,n.forceBaseType=null,n):{}}function JsonProperty(n){return function(e,t){var r;n!=null&&n.scheme?Array.isArray(n.scheme)?n.scheme.length==0?r=[BASE_SCHEME]:r=n.scheme:r=[n.scheme]:r=[BASE_SCHEME];for(var i=0;i<r.length;i++){var a=r[i];if(setMetadata(JSON_TAGS.JSON_PROPERTY,!0,e,t,a),!n)return;if(n.forceBaseType)switch(n.forceBaseType){case JSON_BASETYPES.string:case JSON_BASETYPES.number:case JSON_BASETYPES.bool:setMetadata(JSON_TAGS.JSON_PROPERTY_FORCE_BASE_TYPE,n.forceBaseType,e,t,a)}n.isArray&&setMetadata(JSON_TAGS.JSON_PROPERTY_FORCE_ARRAY,!0,e,t,a),n.name&&(setMetadata(JSON_TAGS.JSON_PROPERTY_NAME_MAP_IN,t,e,n.name,a),setMetadata(JSON_TAGS.JSON_PROPERTY_NAME_MAP_OUT,n.name,e,t,a)),n.mappingFunctions&&(setMetadata(JSON_TAGS.JSON_PROPERTY_FUNC_MAP_IN,n.mappingFunctions.in,e,t,a),setMetadata(JSON_TAGS.JSON_PROPERTY_FUNC_MAP_OUT,n.mappingFunctions.out,e,t,a)),n.type&&setMetadata(JSON_TAGS.JSON_PROPERTY_TYPED,n.type,e,t,a),n.skipForceType&&setMetadata(JSON_TAGS.JSON_PROPERTY_TYPED_SKIP_FORCED,!0,e,t,a)}}}function JsonNumber(n){return n=cleanNonAccesibleSettings(n),n.forceBaseType=JSON_BASETYPES.number,JsonProperty(n)}function JsonString(n){return n=cleanNonAccesibleSettings(n),n.forceBaseType=JSON_BASETYPES.string,JsonProperty(n)}function JsonBoolean(n){return n=cleanNonAccesibleSettings(n),n.forceBaseType=JSON_BASETYPES.bool,JsonProperty(n)}function JsonClassTyped(n,e){return e=cleanNonAccesibleSettings(e),e.type=n,JsonProperty(e)}function JsonArrayClassTyped(n,e){return e=cleanNonAccesibleSettings(e),e.isArray=!0,e.type=n,JsonProperty(e)}function JsonMappingRecordInArrayOut(n){var e=n.type;n=cleanNonAccesibleSettings(n!=null?n:{});var t=function(i,a){return Object.values(i).map(function(o){return a(o)})},r=function(i,a){var o={};return i.map(function(s){var c=a(s),l=c[n.KeyPropertyName];if(typeof l=="function")try{if(l=c[n.KeyPropertyName](),l==null)throw new Error("after calling function ".concat(n.KeyPropertyName," key value was '").concat(l,"' "))}catch{var d=l.length>0?", Note that message must have 0 Arguments, that arent either optional or have default values":"",u="Something went wrong with callign method '".concat(n.KeyPropertyName,"'").concat(d);throw new Error(u)}o[l]=c}),o};return e&&(n.type=e),n.mappingFunctions={out:t,in:r},JsonProperty(n)}function cleanObjectOptions(n){return n||(n={}),n.onAfterDeSerialization||(n.onAfterDeSerialization=function(e){}),(!n.scheme||n.scheme.length==0)&&(n.scheme=[BASE_SCHEME]),n}function JsonObject(n){return n=cleanObjectOptions(n),function(e){var t=n==null?void 0:n.scheme;(!t||t.length==0)&&(t=[BASE_SCHEME]);for(var r=0;r<t.length;r++){var i=t[r];n.onAfterDeSerialization&&setOwnMetaData(JSON_TAGS.JSON_OBJECT_ON_AFTER_DE_SERIALIZATION,e,n.onAfterDeSerialization,i),n.onAfterSerialization_beforeString&&setOwnMetaData(JSON_TAGS.JSON_OBJECT_ON_AFTER_SERIALIZATION_BEFORE_STRING,e,n.onAfterSerialization_beforeString,i),n.onAfterSerialization&&setOwnMetaData(JSON_TAGS.JSON_OBJECT_ON_AFTER_SERIALIZATION,e,n.onAfterSerialization,i),n.onBeforeSerialization&&setOwnMetaData(JSON_TAGS.JSON_OBJECT_ON_BEFORE_SERIALIZATION,e,n.onBeforeSerialization,i),n.onBeforeDeSerialization&&setOwnMetaData(JSON_TAGS.JSON_OBJECT_ON_BEFORE_DE_SERIALIZATION,e,n.onBeforeDeSerialization,i)}}}var JSONHandler=function(){function n(){}return n.serialize=function(e,t){t===void 0&&(t=BASE_SCHEME);var r=n.serializeRaw(e,t),i=JSON.stringify(r),a=getOwnMetaDataKeys(e);if(a.includes(JSON_TAGS.JSON_OBJECT_ON_AFTER_SERIALIZATION)){var o=getOwnMetaData(JSON_TAGS.JSON_OBJECT_ON_AFTER_SERIALIZATION,e,t);o&&(i=o(i))}return i},n.serializeRaw=function(e,t,r){if(t===void 0&&(t=BASE_SCHEME),r===void 0&&(r="FIRST"),!e)return e;var i=typeof e;switch(i){case"string":return n.deserializeAndForceSimple("string",e,t);case"boolean":case"number":return e}if(!hasMetaData(e,t))try{return e}catch{return{}}var a={},o=getOwnMetaDataKeys(e);if(o.includes(JSON_TAGS.JSON_OBJECT_ON_BEFORE_SERIALIZATION)){var s=getOwnMetaData(JSON_TAGS.JSON_OBJECT_ON_BEFORE_SERIALIZATION,e,t);s&&s(e)}var c;c=Object.getOwnPropertyNames(e);for(var l=function(u){var f=c[u],_=getMetaDataKeys(e,f,t);if(!_.includes(JSON_TAGS.JSON_PROPERTY))return"continue";var p=f;_.includes(JSON_TAGS.JSON_PROPERTY_NAME_MAP_OUT)&&(p=getMetadata(JSON_TAGS.JSON_PROPERTY_NAME_MAP_OUT,e,f,t));var y=function(N,w){return N},g=!1;_.includes(JSON_TAGS.JSON_PROPERTY_TYPED_SKIP_FORCED)&&(g=getMetadata(JSON_TAGS.JSON_PROPERTY_TYPED_SKIP_FORCED,e,f,t)),_.includes(JSON_TAGS.JSON_PROPERTY_TYPED)&&!g&&(y=function(N,w){var D=getMetadata(JSON_TAGS.JSON_PROPERTY_TYPED,e,f,t).prototype,X=getPrototype(N);setPrototype(N,D);var Q=w(N);return setPrototype(N,X),Q});var h=null;if(_.includes(JSON_TAGS.JSON_PROPERTY_FUNC_MAP_OUT)){var P=getMetadata(JSON_TAGS.JSON_PROPERTY_FUNC_MAP_OUT,e,f,t),v=function(N){return P(N,function(w){return y(w,function(D){return n.serializeRaw(D,t,r+":"+f)})})};h=v(e[f])}else if(_.includes(JSON_TAGS.JSON_PROPERTY_FORCE_ARRAY)){if(h=[],e[f])if(Array.isArray(e[f]))for(var m=function(N){var w=y(e[f][N],function(D){return n.serializeRaw(D,t,r+":["+N+"]:"+f)});h.push(w)},A=0;A<e[f].length;A++)m(A);else h.push(y(e[f],function(N){return n.serializeRaw(N,t,r+":"+f)}))}else h=y(e[f],function(N){return n.serializeRaw(N,t,r+":"+f)});if(_.includes(JSON_TAGS.JSON_PROPERTY_FORCE_BASE_TYPE)){var E=getMetadata(JSON_TAGS.JSON_PROPERTY_FORCE_BASE_TYPE,e,f,t),S=function(N){return n.deserializeAndForceSimple(E,N,t)};if(_.includes(JSON_TAGS.JSON_PROPERTY_FORCE_ARRAY)){for(var b=h,G=[],T=0;T<b.length;T++)G.push(S(b[T]));h=G}else h=S(e[f])}a[p]=h},d=0;d<c.length;d++)l(d);if(o.includes(JSON_TAGS.JSON_OBJECT_ON_AFTER_SERIALIZATION_BEFORE_STRING)){var s=getOwnMetaData(JSON_TAGS.JSON_OBJECT_ON_AFTER_SERIALIZATION_BEFORE_STRING,e,t);s&&s(a)}return a},n.deserialize=function(e,t,r,i){r===void 0&&(r=BASE_SCHEME),i||(i=NoOutput);var a=typeof t;switch(a=="string"&&(t=JSON.parse(t)),a){case"boolean":case"number":i.outError("Cannot derserialize type of "+a);return}if(Array.isArray(t)){for(var o=[],s=0;s<t.length;s++)o.push(this.deserializeRaw(e,t[s],r));return o}else return this.deserializeRaw(e,t,r)},n.deserializeAndForceSimple=function(e,t,r){r===void 0&&(r=BASE_SCHEME);var i=t,a=function(s){return s};switch(e){case JSON_BASETYPES.bool:a=function(s){return Boolean(s)};break;case JSON_BASETYPES.string:if(t==null)return"";if(typeof t=="string")return t;if(Array.isArray(t)){var o=JSON.stringify(t);return o}else if(typeof t=="object")return hasMetaData(t,r)?n.serialize(t,r):JSON.stringify(t);a=function(s){return String(s)};break;case JSON_BASETYPES.number:if(t==null)return 0;if(typeof t=="object")return 1;a=function(s){var c=Number(s);return isNaN(c)?0:c};break}return i=a(i),i},n.deserializeRaw=function(e,t,r,i){if(r===void 0&&(r=BASE_SCHEME),!t)return t;var a=new e,o=e.prototype,s=getOwnMetaDataKeys(e);if(s.includes(JSON_TAGS.JSON_OBJECT_ON_BEFORE_DE_SERIALIZATION)){var c=getOwnMetaData(JSON_TAGS.JSON_OBJECT_ON_BEFORE_DE_SERIALIZATION,a,r);c&&(a=c(a,t)),n.areSamePrototypes(a,e)||(e=getPrototype(a).constructor)}for(var l=Object.getOwnPropertyNames(t),d=function(f){var _=l[f],p=_,y=getMetaDataKeys(e,_,r),g=_;if(y.length==0)return"continue";y.includes(JSON_TAGS.JSON_PROPERTY_NAME_MAP_IN)&&(_=getMetadata(JSON_TAGS.JSON_PROPERTY_NAME_MAP_IN,o,_,r),y=getMetaDataKeys(e,_,r),g=_);var h=null,P=getMetadata(JSON_TAGS.JSON_PROPERTY_TYPED,o,_,r);if(y.includes(JSON_TAGS.JSON_PROPERTY_FUNC_MAP_IN)){var v=getMetadata(JSON_TAGS.JSON_PROPERTY_FUNC_MAP_IN,o,_,r);P?h=v(t[p],function(N){var w=n.deserializeRaw(P,N,r,_);return w}):h=v(t[p],function(N){return N})}else if(y.includes(JSON_TAGS.JSON_PROPERTY_FORCE_ARRAY)){var m=function(N){return N};P&&(m=function(N){return n.deserializeRaw(P,N,r,_)});var A=function(N,w){return m(N)};y.includes(JSON_TAGS.JSON_PROPERTY_FORCE_BASE_TYPE)&&(A=function(N,w){return n.deserializeAndForceSimple(w,N)}),h=[];for(var E=getMetadata(JSON_TAGS.JSON_PROPERTY_FORCE_BASE_TYPE,o,_,r),S=0;S<t[p].length;S++){var b=t[p][S],G=A(b,E);h.push(G)}}else if(P)h=n.deserializeRaw(P,t[p],r,_);else if(y.includes(JSON_TAGS.JSON_PROPERTY_FORCE_BASE_TYPE)){var T=getMetadata(JSON_TAGS.JSON_PROPERTY_FORCE_BASE_TYPE,e,_,r);h=n.deserializeAndForceSimple(T,t[p])}else h=t[p];a[g]=h},u=0;u<l.length;u++)d(u);if(s=getOwnMetaDataKeys(a),s.includes(JSON_TAGS.JSON_OBJECT_ON_AFTER_DE_SERIALIZATION)){var c=getOwnMetaData(JSON_TAGS.JSON_OBJECT_ON_AFTER_DE_SERIALIZATION,a,r);c&&c(a)}return a},n.changePrototype=function(e,t){var r=getPrototype(t);setPrototype(e,r)},n.areSamePrototypes=function(e,t){var r=getPrototype(t),i=getPrototype(e);return r==i},n}();function getAugmentedNamespace(n){var e=n.default;if(typeof e=="function"){var t=function(){return e.apply(this,arguments)};t.prototype=e.prototype}else t={};return Object.defineProperty(t,"__esModule",{value:!0}),Object.keys(n).forEach(function(r){var i=Object.getOwnPropertyDescriptor(n,r);Object.defineProperty(t,r,i.get?i:{enumerable:!0,get:function(){return n[r]}})}),t}var dist={},KeyManager$1={};Object.defineProperty(KeyManager$1,"__esModule",{value:!0});KeyManager$1.keyManagerInstance=KeyManager$1.KeyManager=void 0;var KeyManager=function(){function n(){this.keyCounter=0}return n.prototype.getNewKey=function(){var e=this.keyCounter++;return e.toString(16)},n}();KeyManager$1.KeyManager=KeyManager;KeyManager$1.keyManagerInstance=new KeyManager;var TTRPGSystemGraphModel$1={};const require$$0=getAugmentedNamespace(tslib_es6$1);var IOutputHandler={};Object.defineProperty(IOutputHandler,"__esModule",{value:!0});IOutputHandler.newOutputHandler=void 0;function newOutputHandler(){var n={outError:function(e){console.error(e)},outLog:function(e){console.log(e)}};return n}IOutputHandler.newOutputHandler=newOutputHandler;var GrobNodte={},AGraphItem$1={};Object.defineProperty(AGraphItem$1,"__esModule",{value:!0});AGraphItem$1.AGraphItem=void 0;var KeyManager_1=KeyManager$1,keyManager=new KeyManager_1.KeyManager,AGraphItem=function(){function n(e,t){e===void 0&&(e=""),t===void 0&&(t=""),this.name=e,this._key=t+keyManager.getNewKey()}return n.prototype.getName=function(){return this.name},n.prototype.setName=function(e){this.name=e},n.prototype.getKey=function(){return this._key},n}();AGraphItem$1.AGraphItem=AGraphItem;Object.defineProperty(GrobNodte,"__esModule",{value:!0});GrobNodte.GrobDerivedNode=GrobNodte.GrobFixedNode=GrobNodte.GrobNode=GrobNodte.GrobDerivedOrigin=void 0;var tslib_1$3=require$$0,AGraphItem_1$2=AGraphItem$1,grobDerivedSymbolRegex=/@[a-zA-Z]/g,GrobDerivedOrigin=function(){function n(){this.standardValue=1}return n.UnkownLocationKey="unknown.unknown.unknown",n}();GrobNodte.GrobDerivedOrigin=GrobDerivedOrigin;var GrobNode=function(n){tslib_1$3.__extends(e,n);function e(t,r,i){var a=n.call(this,t,r)||this;return a.dependencies={},a.dependents={},a.updateListeners={},i&&(a.parent=i),a}return e.getTypeString=function(){return"Nodte<T extends Nodte<T>>"},e.prototype.addDependent=function(t){var r=t.getKey();return this.dependents[r]||(this.dependents[r]=t),!0},e.prototype.removeDependent=function(t){return delete this.dependents[t.getKey()],this.dependents[t.getKey()]==null},e.prototype.getDependents=function(){var t;return(t=Object.values(this.dependents))!==null&&t!==void 0?t:[]},e.prototype.getDependencies=function(){var t;return(t=Object.values(this.dependencies))!==null&&t!==void 0?t:[]},e.prototype.getLocationKey=function(){var t=this.getLocationKeySegments();return t.join(".")},e.prototype.getLocationKeySegments=function(){var t,r,i,a,o,s,c=["","",""];return c[0]=(i=(r=(t=this.parent)===null||t===void 0?void 0:t.parent)===null||r===void 0?void 0:r.getName())!==null&&i!==void 0?i:"unknown",c[1]=(o=(a=this.parent)===null||a===void 0?void 0:a.getName())!==null&&o!==void 0?o:"unknown",c[2]=(s=this.getName())!==null&&s!==void 0?s:"unknown",c},e.prototype.update=function(){var t=this;return this._update(),Object.keys(this.updateListeners).forEach(function(r){t.updateListeners[r]()}),!0},e.prototype.dispose=function(){for(var t in this.dependencies){var r=this.dependencies[t];r.removeDependent(this)}for(var t in this.dependents){var r=this.dependents[t];r.nullifyDependency(this)}this.parent=null,this.name=null},e.prototype.setName=function(t){var r=this.getName();n.prototype.setName.call(this,t),this.parent.update_node_name(r,t),this.updateLocation(this.parent)},e.prototype.updateLocation=function(t){this.parent=t;for(var r in this.dependents){var i=this.dependents[r];i.updateDependecysLocation(this)}},e.prototype.updateDependecysLocation=function(t){},e.prototype.isValid=function(){return!0},e.prototype.addUpdateListener=function(t,r){if(this.updateListeners[t]!=null)return console.error("tried to add updatelistener to node with key:"+t+". but there was already a listener using that key"),!1;this.updateListeners[t]=r},e.prototype.removeUpdateListener=function(t){delete this.updateListeners[t]},e.prototype.removeAllUpdateListeners=function(){this.updateListeners={}},e}(AGraphItem_1$2.AGraphItem);GrobNodte.GrobNode=GrobNode;var GrobFixedNode=function(n){tslib_1$3.__extends(e,n);function e(t,r){var i=n.call(this,t,"NF",r)||this;return i.___value=1,i}return e.prototype.getValue=function(){return this.___value},e.prototype.setValue=function(t){this.___value=t;for(var r in this.dependents){var i=this.dependents[r];i.update()}},e.getTypeString=function(){return"fixedNode"},e.prototype.getTypeString=function(){return e.getTypeString()},e.prototype.addDependency=function(t){return!1},e.prototype.removeDependency=function(t){return!1},e.prototype.nullifyDependency=function(t){return!1},e.prototype._update=function(){},e}(GrobNode);GrobNodte.GrobFixedNode=GrobFixedNode;var GrobDerivedNode=function(_super){tslib_1$3.__extends(GrobDerivedNode,_super);function GrobDerivedNode(n,e){var t=_super.call(this,n,"ND",e)||this;return t.calc="@a",t.origins=[],t._value=NaN,t}return GrobDerivedNode.prototype.getValue=function(){return this._value},GrobDerivedNode.prototype.setValue=function(n){this._value=n},GrobDerivedNode.getTypeString=function(){return"derivedNode"},GrobDerivedNode.prototype.getTypeString=function(){return GrobDerivedNode.getTypeString()},GrobDerivedNode.prototype.addDependency=function(n){var e=n.getKey();return this.dependencies[e]=n,n.addDependent(this),!0},GrobDerivedNode.prototype.removeDependency=function(n){var e=n.getKey();this.dependencies[e]&&(delete this.dependencies[e],n.removeDependent(this));for(var t=0;t<this.origins.length;t++){var r=this.origins[t];r.origin!=null&&r.origin.getKey()==e&&(r.origin=null)}return this.dependencies[e]==null},GrobDerivedNode.prototype.nullifyDependency=function(n){var e=n.getKey(),t=this.origins.find(function(r){var i;return((i=r.origin)===null||i===void 0?void 0:i.getKey())==e});return t&&(t.origin=null,t.originKey=GrobDerivedOrigin.UnkownLocationKey),this.removeDependency(n)},GrobDerivedNode.prototype.setOrigin=function(n,e,t){var r,i;t===void 0&&(t=null);var a=this.origins.find(function(s){return s.symbol==n});if(!a)return!1;a.origin&&this.removeDependency(a.origin);var o=(r=e==null?void 0:e.getTypeString())!==null&&r!==void 0?r:"";return["derivedNode","fixedNode"].find(function(s){return s==o})||(e=null),e&&this.addDependency(e),a.origin=e,a.standardValue=(i=t!=null?t:a.standardValue)!==null&&i!==void 0?i:1,a.origin&&(a.originKey=a.origin.getLocationKey()),this.isValid()&&this.recalculate(!1),!0},GrobDerivedNode.prototype.isValid=function(){var n=!1;if(this.origins.forEach(function(t){t.origin||(n=!0)}),n)return!1;var e=this.origins.filter(function(t){return t.origin!=null});return e.length==this.getDependencies().length},GrobDerivedNode.prototype.updateOrigins=function(){var n=this.parseCalculationToOrigins(this.calc);if(n){var e=n.symbolsToRem,t=n.symbolsToAdd;if(e.length!=0&&(this.origins=this.origins.filter(function(c){return!e.includes(c.symbol)})),t.length!=0)for(var r=0;r<t.length;r++){var i=new GrobDerivedOrigin;i.symbol=t[r],i.standardValue=1,i.origin=null,i.originKey=GrobDerivedOrigin.UnkownLocationKey,this.origins.push(i)}var a={};this.getDependencies().forEach(function(c){return a[c.getName()]=c});var o={};this.origins.forEach(function(c){var l;c.origin!=null&&(o[(l=c.origin)===null||l===void 0?void 0:l.getName()]=c.origin)});for(var s in a)o[s]||this.removeDependency(a[s]);return{added:t,removed:e.length}}else return{added:0,removed:0}},GrobDerivedNode.prototype.setCalc=function(n,e){e===void 0&&(e=!0),this._value=NaN;var t=this.testCalculate(n);return t==null||!t.success?!1:(this.calc=n,e&&this.updateOrigins(),this.isValid()&&this.recalculate(!1),!0)},GrobDerivedNode.prototype.parseCalculationToOrigins=function(n){var e,t=n,r=(e=t.match(grobDerivedSymbolRegex))!==null&&e!==void 0?e:[];r=Array.from(new Set(r));var i=this.origins.map(function(s){return s.symbol}),a=r.filter(function(s){return!i.includes(s)}),o=i.filter(function(s){return!r.includes(s)});return{symbolsToRem:o,symbolsToAdd:a,totalSymbols:r}},GrobDerivedNode.staticParseCalculationToOrigins=function(n){var e,t=n,r=(e=t.match(grobDerivedSymbolRegex))!==null&&e!==void 0?e:[];return r=Array.from(new Set(r)),r},GrobDerivedNode.prototype.recalculate=function(n){n===void 0&&(n=!1);var e=Object.fromEntries(n?this.origins.map(function(i){return[i.symbol,i.standardValue]}):this.origins.map(function(i){var a;return[i.symbol,(a=i.origin)===null||a===void 0?void 0:a.getValue()]})),t=this.calc,r=this._recalculate(e,t);return this._value=r.value,r.success},GrobDerivedNode.prototype._recalculate=function(n,e){return n===void 0&&(n={}),GrobDerivedNode.recalculate(n,e)},GrobDerivedNode.recalculate=function(rec,statement){rec===void 0&&(rec={});var symbols=statement.match(grobDerivedSymbolRegex),_statement=statement;symbols==null||symbols.forEach(function(n){var e=rec[n];_statement=_statement.replace(n,e+"")});var recalcSuccess=!1,value=0;try{var res=eval(_statement);typeof res=="number"?(recalcSuccess=!0,value=res):(recalcSuccess=!1,value=NaN)}catch(n){recalcSuccess=!1,value=NaN}return{success:recalcSuccess,value}},GrobDerivedNode.prototype.testCalculate=function(n){var e=n.match(grobDerivedSymbolRegex),t=e?Object.fromEntries(e.map(function(i){return[i,1]})):{},r=this._recalculate(t,n);return r},GrobDerivedNode.testCalculate=function(n,e){e===void 0&&(e={});var t=n.match(grobDerivedSymbolRegex);function r(o,s){return s[o]?s[o]:1}var i=t?Object.fromEntries(t.map(function(o){return[o,r(o,e)]})):{},a=GrobDerivedNode.recalculate(i,n);return a},GrobDerivedNode.prototype._update=function(){if(!this.isValid())return console.error("Node isent Valid ".concat(this.getName()," ").concat(this.getLocationKey()," Stopping update")),!1;this.recalculate();var n=!0;for(var e in this.dependents){var t=this.dependents[e];n=n&&t.update()}return n},GrobDerivedNode.prototype.updateDependecysLocation=function(n){var e=this.origins.find(function(t){var r;return((r=t.origin)===null||r===void 0?void 0:r.getName())==n.getName()});!e||(e.originKey=n.getLocationKey())},GrobDerivedNode}(GrobNode);GrobNodte.GrobDerivedNode=GrobDerivedNode;var TTRPGSystemGraphAbstractModel$1={},GrobCollection$1={};Object.defineProperty(GrobCollection$1,"__esModule",{value:!0});GrobCollection$1.GrobCollection=void 0;var tslib_1$2=require$$0,AGraphItem_1$1=AGraphItem$1,GrobCollection=function(n){tslib_1$2.__extends(e,n);function e(t,r){var i=n.call(this,t,"C")||this;return i.nodes_names={},i}return e.prototype.getNodeNames=function(){return Object.keys(this.nodes_names)},e.prototype.getNodes=function(){return Object.values(this.nodes_names)},e.prototype.hasNode=function(t){return!!this.nodes_names[t]},e.prototype.getNode=function(t){var r;return(r=this.nodes_names[t])!==null&&r!==void 0?r:null},e.prototype.addNode=function(t){return t.parent=this,this.nodes_names[t.getName()]=t,!0},e.prototype.removeNode=function(t){if(!t)return console.error('attempted to delete node "Null" '),!1;var r=t.getName(),i=this.nodes_names[r];return i?(i.dispose(),delete this.nodes_names[r],this.nodes_names[r]==null):!1},e.prototype.update_node_name=function(t,r){t!=r&&(this.nodes_names[r]=this.nodes_names[t],delete this.nodes_names[t])},e.prototype.setName=function(t){var r=this.getName();r!=t&&(n.prototype.setName.call(this,t),this.parent.update_collection_name(r,t),this.updateLocation(this.parent))},e.prototype.updateLocation=function(t){this.parent=t;for(var r in this.nodes_names){var i=this.nodes_names[r];i.updateLocation(this)}},e.prototype.dispose=function(){for(var t in this.nodes_names){var r=this.nodes_names[t];r.dispose(),delete this.nodes_names[t]}this.parent=null,this.name=null},e}(AGraphItem_1$1.AGraphItem);GrobCollection$1.GrobCollection=GrobCollection;var GrobGroup$1={};Object.defineProperty(GrobGroup$1,"__esModule",{value:!0});GrobGroup$1.GrobGroup=void 0;var tslib_1$1=require$$0,AGraphItem_1=AGraphItem$1,GrobGroup=function(n){tslib_1$1.__extends(e,n);function e(t,r){var i=n.call(this,t,"G")||this;return i.collections_names={},i}return e.prototype.getCollectionsNames=function(){return Object.keys(this.collections_names)},e.prototype.hasCollection=function(t){return!!this.collections_names[t]},e.prototype.getCollection=function(t){return this.collections_names[t]},e.prototype.addCollection=function(t){return t.parent=this,this.collections_names[t.getName()]=t,!0},e.prototype.removeCollection=function(t){var r=t.getName(),i=this.collections_names[r];return i?(t.dispose(),delete this.collections_names[r],this.collections_names[r]==null):!1},e.prototype.update_collection_name=function(t,r){this.collections_names[r]=this.collections_names[t],delete this.collections_names[t]},e.prototype.setName=function(t){n.prototype.setName.call(this,t);for(var r in this.collections_names){var i=this.collections_names[r];i.updateLocation(this)}},e.prototype.dispose=function(){for(var t in this.collections_names){var r=this.collections_names[t];r.dispose(),delete this.collections_names[t]}this.name=null},e}(AGraphItem_1.AGraphItem);GrobGroup$1.GrobGroup=GrobGroup;Object.defineProperty(TTRPGSystemGraphAbstractModel$1,"__esModule",{value:!0});TTRPGSystemGraphAbstractModel$1.TTRPGSystemGraphAbstractModel=void 0;var GrobCollection_1=GrobCollection$1,GrobGroup_1=GrobGroup$1,IOutputHandler_1$1=IOutputHandler,TTRPGSystemGraphAbstractModel=function(){function n(){this.data={}}return n.prototype.setOut=function(e){this.out=e||(0,IOutputHandler_1$1.newOutputHandler)()},n.prototype._deleteGroup=function(e){if(typeof e=="string"){var t=this._getGroup(e);if(!t)return!1;e=t}var r=e.getName(),i=this.data[r];if(!i)return this.out.outError("tried to delete non existant group"),!1;e.dispose(),delete this.data[r]},n.prototype._createGroup=function(e){if(this._hasGroup(e))return this.out.outError("attempted to add new group, however group already existed"),null;var t=new GrobGroup_1.GrobGroup(e,this);return this.data[t.getName()]=t,t},n.prototype._hasGroup=function(e){for(var t in this.data)if(this.data[t].getName()==e)return!0;return!1},n.prototype._getGroup_key=function(e){return this.data[e]},n.prototype._getGroup=function(e){for(var t in this.data)if(this.data[t].getName()==e)return this.data[t];return null},n.prototype._deleteCollection=function(e){e||this.out.outError("tried to delete collection, but supplied collection was invalid");var t=e.parent;return t.removeCollection(e)},n.prototype._createCollection=function(e,t){if(e||this.out.outError("tried to create collection, but supplied group was invalid"),e.hasCollection(t))return this.out.outError("Collection by that name already existed in '".concat(e.getName(),"'")),null;var r=new GrobCollection_1.GrobCollection(t,e);return e.addCollection(r),r},n.prototype._AddNode=function(e,t){return e||this.out.outError("tried to add node, but supplied collection was invalid"),e.addNode(t)},n.prototype._deleteNode=function(e){var t=e.parent,r=t.removeNode(e);return e.dispose(),r},n.prototype._addNodeDependency=function(e,t){var r=e.addDependency(t),i=t.addDependent(e);return r&&i?!0:(r||this.out.outError("Could not add dependency ".concat(t.getName(),", on node ").concat(e.getName())),i||this.out.outError("Could not add dependent ".concat(e.getName(),", on node ").concat(t.getName())),!1)},n.prototype._removeNodeDependency=function(e,t){var r=e.removeDependency(t),i=t.removeDependent(e);return r&&i?!0:(r||this.out.outError("Could not remove dependency ".concat(t.getName(),", on node ").concat(e.getName())),i||this.out.outError("Could not remove dependent ".concat(e.getName(),", on node ").concat(t.getName())),!1)},n}();TTRPGSystemGraphAbstractModel$1.TTRPGSystemGraphAbstractModel=TTRPGSystemGraphAbstractModel;Object.defineProperty(TTRPGSystemGraphModel$1,"__esModule",{value:!0});TTRPGSystemGraphModel$1.TTRPGSystemGraphModel=void 0;var tslib_1=require$$0,IOutputHandler_1=IOutputHandler,GrobNodte_1=GrobNodte,TTRPGSystemGraphAbstractModel_1=TTRPGSystemGraphAbstractModel$1,derived="derived",fixed="fixed",TTRPGSystemGraphModel=function(n){tslib_1.__extends(e,n);function e(){var t=n.call(this)||this;return t.setOut((0,IOutputHandler_1.newOutputHandler)()),t}return e.prototype.initAsNew=function(){this._createGroup("fixed"),this._createGroup("derived")},e.prototype.createCollection=function(t,r){this._hasGroup(t)||this.out.outError("No group existed by name ".concat(t));var i=this._getGroup(t);return i?this._createCollection(i,r):null},e.prototype.createDerivedCollection=function(t){return this.createCollection(derived,t)},e.prototype.createFixedCollection=function(t){return this.createCollection(fixed,t)},e.prototype.createNode=function(t,r,i){return this._hasGroup(t)?this.hasNode(t,r,i)?(this.out.outError("Node by this name already existed ".concat(t)),null):t=="fixed"?this.createFixedNode(r,i):t=="derived"?this.createDerivedNode(r,i):null:(this.out.outError("No group existed by name ".concat(t)),null)},e.prototype.createDerivedNode=function(t,r){var i=t;if(typeof t=="string"){var a=this._getGroup(derived);if(!a)return null;t=a.getCollection(t)}else i=t.getName();if(!t)return this.out.outError("No Derived collection found by name: ".concat(i," ")),null;var o=new GrobNodte_1.GrobDerivedNode(r,t);return t.addNode(o),o},e.prototype.createFixedNode=function(t,r){var i=this._getGroup(fixed);if(!i)return null;var a=t;if(typeof t!="string"?a=t.getName():t=i.getCollection(a),!t)return this.out.outError("No Fixed collection found by name: ".concat(a," ")),null;var o=new GrobNodte_1.GrobFixedNode(r,t);return t.addNode(o),o},e.prototype.hasCollection=function(t,r){var i=this._getGroup(t);return i?i.hasCollection(r):(this.out.outError("No group existed by name ".concat(t)),!1)},e.prototype.hasDerivedCollection=function(t){return this.hasCollection(derived,t)},e.prototype.hasFixedCollection=function(t){return this.hasCollection(fixed,t)},e.prototype.hasNode=function(t,r,i){var a=this._getGroup(t);if(!a)return this.out.outError("No group existed by name ".concat(t)),!1;var o=r;return typeof r=="string"&&(o=this.getCollection(a,r),!o)?(this.out.outError("attempted to get ".concat(t," collection ").concat(i,", but no collection existed by that name")),!1):o.hasNode(i)},e.prototype.hasDerivedNode=function(t,r){return this.hasNode(derived,t,r)},e.prototype.hasFixedNode=function(t,r){return this.hasNode(fixed,t,r)},e.prototype.getCollectionNames=function(t){var r;return typeof t=="string"?r=this._getGroup(t):r=t,r?r.getCollectionsNames():(this.out.outError("No group existed by name ".concat(t)),[])},e.prototype.getCollection=function(t,r){var i;if(typeof t=="string"?i=this._getGroup(t):i=t,!i)return this.out.outError("No group existed by name ".concat(t)),null;var a=i.getCollection(r);return a||(this.out.outError("attempted to get ".concat(t," collection ").concat(r,", but no collection existed by that name")),null)},e.prototype.getDerivedCollection=function(t){return this.getCollection(derived,t)},e.prototype.getFixedCollection=function(t){return this.getCollection(fixed,t)},e.prototype.getNode=function(t,r,i){var a=this._getGroup(t);if(!a)return this.out.outError("No group existed by name ".concat(t)),null;var o;if(typeof r!="string")o=r.getNode(i);else{var s=r;if(r=a.getCollection(r),!r)return this.out.outError("attempted to get ".concat(t," collection ").concat(s,", but did not exist")),null;o=r.getNode(i)}return o||(this.out.outError("attempted to get ".concat(t,".").concat(r.getName()," Node ").concat(i,", but did not exist")),null)},e.prototype.getDerivedNode=function(t,r){return this.getNode(derived,t,r)},e.prototype.getFixedNode=function(t,r){return this.getNode(fixed,t,r)},e.prototype.getNodeNames=function(t,r){var i=this._getGroup(t);if(!i)return this.out.outError("No group existed by name ".concat(t)),null;var a;return typeof r=="string"?a=i.getCollection(r):a=r,a.getNodeNames()},e.prototype._deleteGroup=function(t){if(typeof t=="string"){var r=t;if(t=this._getGroup(t),!t)return this.out.outError("No Collection by name "+r),!1}n.prototype._deleteGroup.call(this,t)},e.prototype.deleteCollection=function(t,r){var i=this._getGroup(t);return i?typeof r=="string"&&(r=r=i.getCollection(r),!r)?!1:this._deleteCollection(r):(this.out.outError("No group existed by name ".concat(t)),!1)},e.prototype.deleteDerivedCollection=function(t){return this.deleteCollection(derived,t)},e.prototype.deleteFixedCollection=function(t){return this.deleteCollection(fixed,t)},e.prototype.deleteNode=function(t,r,i){var a=this._getGroup(t);if(!a)return this.out.outError("No group existed by name ".concat(t)),!1;if(typeof r=="string"&&(r=a.getCollection(r)),!r)return this.out.outError("attempted to get ".concat(t," collection ").concat(i,", but no collection existed by that name")),!1;var o=r.getNode(i);return r.removeNode(o)},e.prototype.deleteDerivedNode=function(t,r){return this.deleteNode(derived,t,r)},e.prototype.deleteFixedNode=function(t,r){return this.deleteNode(fixed,t,r)},e.prototype.renameCollection=function(t,r,i){var a,o;if(typeof t=="string"?(o=t,a=this._getGroup(t)):(o=t.getName(),a=t),!a)return this.out.outError("No group existed by name ".concat(o)),null;var s=r;return typeof r=="string"?(s=r,r=a.getCollection(r)):s=r.getName(),r?a.update_collection_name(s,i):(this.out.outError("No Collection existed by name ".concat(s," in ").concat(o)),null)},e.prototype.renameItem=function(t,r,i,a){var o,s;if(typeof t=="string"?(s=t,o=this._getGroup(t)):(s=t.getName(),o=t),!o)return this.out.outError("No group existed by name ".concat(s)),null;var c=r;return typeof r=="string"?(c=r,r=o.getCollection(r)):c=r.getName(),r?r.hasNode(i)?r.update_node_name(i,a):(this.out.outError("No Item existed by name ".concat(i," in ").concat(s,".").concat(c)),null):(this.out.outError("No Collection existed by name ".concat(c," in ").concat(s)),null)},e.prototype.isValid=function(t){t===void 0&&(t=[]);var r,i,a,o,s,c,l,d,u;for(r in this.data){c=this.data[r],o=c.getCollectionsNames();for(var f in c.getCollectionsNames()){i=o[f],l=c.getCollection(i),s=l.getNodeNames();for(var _ in s)if(a=s[_],d=l.getNode(a),u=d.isValid(),!u){var p="".concat(r,".").concat(i,".").concat(a," was invalid"),y=[r,i,a];t.push({msg:p,key:y})}}}return t.length==0},e.prototype._getGroup=function(t){var r=this.data[t];return r!=null?r:null},e.prototype.addNodeDependency=function(t,r){this._addNodeDependency(t,r)},e.prototype.removeNodeDependency=function(t,r){this._removeNodeDependency(t,r)},e}(TTRPGSystemGraphAbstractModel_1.TTRPGSystemGraphAbstractModel);TTRPGSystemGraphModel$1.TTRPGSystemGraphModel=TTRPGSystemGraphModel;(function(n){Object.defineProperty(n,"__esModule",{value:!0}),n.uuidv4=n.TTRPGSystem=n.GrobGroup=n.GrobCollection=n.GrobDerivedNode=n.GrobDerivedOrigin=n.GrobFixedNode=n.keyManagerInstance=void 0;var e=KeyManager$1;Object.defineProperty(n,"keyManagerInstance",{enumerable:!0,get:function(){return e.keyManagerInstance}});var t=TTRPGSystemGraphModel$1;Object.defineProperty(n,"TTRPGSystem",{enumerable:!0,get:function(){return t.TTRPGSystemGraphModel}});var r=GrobCollection$1;Object.defineProperty(n,"GrobCollection",{enumerable:!0,get:function(){return r.GrobCollection}});var i=GrobGroup$1;Object.defineProperty(n,"GrobGroup",{enumerable:!0,get:function(){return i.GrobGroup}});var a=GrobNodte;Object.defineProperty(n,"GrobDerivedNode",{enumerable:!0,get:function(){return a.GrobDerivedNode}}),Object.defineProperty(n,"GrobDerivedOrigin",{enumerable:!0,get:function(){return a.GrobDerivedOrigin}}),Object.defineProperty(n,"GrobFixedNode",{enumerable:!0,get:function(){return a.GrobFixedNode}});function o(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(s){var c=Math.random()*16|0,l=s=="x"?c:c&3|8;return l.toString(16)})}n.uuidv4=o})(dist);var __defProp$1=Object.defineProperty,__getOwnPropDesc$1=Object.getOwnPropertyDescriptor,__decorateClass$1=(n,e,t,r)=>{for(var i=r>1?void 0:r?__getOwnPropDesc$1(e,t):e,a=n.length-1,o;a>=0;a--)(o=n[a])&&(i=(r?o(e,t,i):o(i))||i);return r&&i&&__defProp$1(e,t,i),i};class SystemPreviewSchemes{}O(SystemPreviewSchemes,"BASE",BASE_SCHEME),O(SystemPreviewSchemes,"PAGE","PAGE");let SystemPreview=class{constructor(){O(this,"id",dist.keyManagerInstance.getNewKey());O(this,"filePath");O(this,"isEditable",!0);O(this,"author");O(this,"version");O(this,"code");O(this,"name");O(this,"folderPath");O(this,"folderName")}init(){this.author="grobax",this.version="0.0.1",this.code="grobdnd",this.name="Grobax' DnD TTPRPG"}};__decorateClass$1([JsonBoolean({scheme:[SystemPreviewSchemes.BASE]})],SystemPreview.prototype,"isEditable",2);__decorateClass$1([JsonString({scheme:[SystemPreviewSchemes.BASE]})],SystemPreview.prototype,"author",2);__decorateClass$1([JsonString({scheme:[SystemPreviewSchemes.BASE,SystemPreviewSchemes.PAGE]})],SystemPreview.prototype,"version",2);__decorateClass$1([JsonString({scheme:[SystemPreviewSchemes.BASE,SystemPreviewSchemes.PAGE]})],SystemPreview.prototype,"code",2);__decorateClass$1([JsonString({scheme:[SystemPreviewSchemes.BASE,SystemPreviewSchemes.PAGE]})],SystemPreview.prototype,"name",2);SystemPreview=__decorateClass$1([JsonObject({onAfterDeSerialization:(n,...e)=>{n.id=dist.keyManagerInstance.getNewKey()}})],SystemPreview);var __defProp=Object.defineProperty,__getOwnPropDesc=Object.getOwnPropertyDescriptor,__decorateClass=(n,e,t,r)=>{for(var i=r>1?void 0:r?__getOwnPropDesc(e,t):e,a=n.length-1,o;a>=0;a--)(o=n[a])&&(i=(r?o(e,t,i):o(i))||i);return r&&i&&__defProp(e,t,i),i};class GrobJDerivedOrigin extends dist.GrobDerivedOrigin{constructor(){super(...arguments);O(this,"symbol");O(this,"originKey")}}__decorateClass([JsonString()],GrobJDerivedOrigin.prototype,"symbol",2);__decorateClass([JsonString()],GrobJDerivedOrigin.prototype,"originKey",2);class GrobJDerivedNode extends dist.GrobDerivedNode{constructor(){super(...arguments);O(this,"name");O(this,"calc");O(this,"origins")}}__decorateClass([JsonString()],GrobJDerivedNode.prototype,"name",2);__decorateClass([JsonString({name:"calculationString"})],GrobJDerivedNode.prototype,"calc",2);__decorateClass([JsonArrayClassTyped(GrobJDerivedOrigin,{name:"calcOrigins"})],GrobJDerivedNode.prototype,"origins",2);class GrobJFixedNode extends dist.GrobFixedNode{constructor(){super(...arguments);O(this,"name");O(this,"___value")}}__decorateClass([JsonString()],GrobJFixedNode.prototype,"name",2);__decorateClass([JsonNumber({name:"standardValue"})],GrobJFixedNode.prototype,"___value",2);class GrobCollectionDerived extends dist.GrobCollection{constructor(){super(...arguments);O(this,"name");O(this,"nodes_names",{})}}__decorateClass([JsonString()],GrobCollectionDerived.prototype,"name",2);__decorateClass([JsonMappingRecordInArrayOut({KeyPropertyName:"getName",name:"data",type:GrobJDerivedNode})],GrobCollectionDerived.prototype,"nodes_names",2);class GrobCollectionFixed extends dist.GrobCollection{constructor(){super(...arguments);O(this,"name");O(this,"nodes_names",{})}}__decorateClass([JsonString()],GrobCollectionFixed.prototype,"name",2);__decorateClass([JsonMappingRecordInArrayOut({KeyPropertyName:"getName",name:"data",type:GrobJFixedNode})],GrobCollectionFixed.prototype,"nodes_names",2);class GrobGroupDerived extends dist.GrobGroup{constructor(){super(...arguments);O(this,"name");O(this,"collections_names",{})}}__decorateClass([JsonString()],GrobGroupDerived.prototype,"name",2);__decorateClass([JsonMappingRecordInArrayOut({KeyPropertyName:"getName",name:"data",type:GrobCollectionDerived})],GrobGroupDerived.prototype,"collections_names",2);class GrobGroupFixed extends dist.GrobGroup{constructor(){super(...arguments);O(this,"name");O(this,"collections_names",{})}}__decorateClass([JsonString()],GrobGroupFixed.prototype,"name",2);__decorateClass([JsonMappingRecordInArrayOut({KeyPropertyName:"getName",name:"data",type:GrobCollectionFixed})],GrobGroupFixed.prototype,"collections_names",2);class TTRPG_SCHEMES{}O(TTRPG_SCHEMES,"PREVIEW","mini");let TTRPGSystemJSONFormatting=class extends dist.TTRPGSystem{constructor(){super();O(this,"fixed");O(this,"derived");O(this,"author","");O(this,"version","");O(this,"systemCodeName",dist.uuidv4());O(this,"systemName","")}setDefaultValues(e){const t=Object.keys(this.derived.collections_names);for(let r=0;r<Object.keys(this.derived.collections_names).length;r++){const i=t[r],a=this.derived.collections_names[i],o=Object.keys(a.nodes_names);for(let s=0;s<o.length;s++){const c=o[s];a.nodes_names[c]}}}};__decorateClass([JsonClassTyped(GrobGroupFixed)],TTRPGSystemJSONFormatting.prototype,"fixed",2);__decorateClass([JsonClassTyped(GrobGroupDerived)],TTRPGSystemJSONFormatting.prototype,"derived",2);__decorateClass([JsonString(),JsonString({scheme:[BASE_SCHEME,TTRPG_SCHEMES.PREVIEW]})],TTRPGSystemJSONFormatting.prototype,"author",2);__decorateClass([JsonString(),JsonString({scheme:[BASE_SCHEME,TTRPG_SCHEMES.PREVIEW]})],TTRPGSystemJSONFormatting.prototype,"version",2);__decorateClass([JsonString(),JsonString({scheme:[BASE_SCHEME,TTRPG_SCHEMES.PREVIEW]})],TTRPGSystemJSONFormatting.prototype,"systemCodeName",2);__decorateClass([JsonString(),JsonString({scheme:[BASE_SCHEME,TTRPG_SCHEMES.PREVIEW]})],TTRPGSystemJSONFormatting.prototype,"systemName",2);TTRPGSystemJSONFormatting=__decorateClass([JsonObject({onBeforeSerialization:n=>{},onAfterDeSerialization:(n,...e)=>{var t;n.fixed?n.data.fixed=n.fixed:(n._createGroup("fixed"),n.fixed=n._getGroup("fixed")),n.derived?n.data.derived=n.derived:(n._createGroup("derived"),n.derived=n._getGroup("derived"));for(const r in n.data){const i=n.data[r];i.parent=n;for(const a in i.collections_names){const o=i.collections_names[a];o.parent=i,i.collections_names[o.getName()]=o;for(const s in o.nodes_names){const c=o.nodes_names[s];c.parent=o,o.nodes_names[c.getName()]=c,((t=c.origins)!=null?t:[]).forEach(d=>{let u=d.originKey.split(".");const f=n.getNode(u[0],u[1],u[2]);d.origin=f,c.addDependency(f)})}}}Object.values(n.data)}})],TTRPGSystemJSONFormatting);class Layout01Context{constructor(){O(this,"activeSystem");O(this,"availablePreviews")}}const B=class{static async call(e,t,r){if(r)var i=await fetch(B.baseUrl+"/"+t,{method:e,headers:{"Content-Type":"application/json"},body:typeof r=="string"?r:JSON.stringify(r)});else var i=await fetch(B.baseUrl+"/"+t,{method:e,headers:{"Content-Type":"application/json"}});return i}static async post(e,t){return await B.call("POST",e,t)}static async get(e){return await B.call("GET",e)}static async delete(e,t){return await B.call("DELETE",e,t)}static async put(e,t){return await B.call("PUT",e,t)}};let Server=B;O(Server,"baseUrl","http://localhost:5000");class APIContext{static async getAllSystems(){let e=await Server.get("api/system");if(e.status==200){let t=await e.text(),r=JSONHandler.deserialize(SystemPreview,t);return{responseCode:e.status,messages:[e.statusText],response:r}}else return{responseCode:e.status,messages:[e.statusText],response:[]}}}function create_fragment$4(n){var Ne,Pe,Ge,Te,Ae,we,Re,Ce,De,xe,Me,Je,Ie,ke;let e,t,r,i,a,o,s,c,l=((Pe=(Ne=n[1])==null?void 0:Ne.author)!=null?Pe:unknownString)+"",d,u,f,_,p,y,g,h=((Te=(Ge=n[1])==null?void 0:Ge.version)!=null?Te:unknownString)+"",P,v,m,A,E,S,b,G=((we=(Ae=n[1])==null?void 0:Ae.code)!=null?we:unknownString)+"",T,N,w,D,X,Q,j,ee=((Ce=(Re=n[1])==null?void 0:Re.isEditable)!=null?Ce:unknownString)+"",de,he,k,z,me,ye,U,te=((xe=(De=n[1])==null?void 0:De.name)!=null?xe:unknownString)+"",_e,ve,$,Z,ge,be,q,ne=((Je=(Me=n[1])==null?void 0:Me.folderName)!=null?Je:unknownString)+"",fe,F,Se,Ee,Oe,W,J,M;return J=new EditAbleList({props:{isEditableContainer:!1,collection:(ke=(Ie=n[0])==null?void 0:Ie.map(func))!=null?ke:[],onSelect:n[3]}}),J.$on("onDeSelect",n[2]),{c(){e=element("div"),t=element("section"),r=element("div"),i=element("div"),a=element("div"),o=text("Author"),s=space(),c=element("div"),d=text(l),u=space(),f=element("div"),_=element("div"),p=text("Version"),y=space(),g=element("div"),P=text(h),v=space(),m=element("div"),A=element("div"),E=text("SystemCodeName"),S=space(),b=element("div"),T=text(G),N=space(),w=element("div"),D=element("div"),X=text("editable"),Q=space(),j=element("div"),de=text(ee),he=space(),k=element("div"),z=element("div"),me=text("SystemName"),ye=space(),U=element("div"),_e=text(te),ve=space(),$=element("div"),Z=element("div"),ge=text("folder name"),be=space(),q=element("div"),fe=text(ne),Se=space(),Ee=element("br"),Oe=space(),W=element("div"),create_component(J.$$.fragment),this.h()},l(R){e=claim_element(R,"DIV",{class:!0});var x=children(e);t=claim_element(x,"SECTION",{});var I=children(t);r=claim_element(I,"DIV",{class:!0,"data-is-edit":!0});var C=children(r);i=claim_element(C,"DIV",{class:!0});var Y=children(i);a=claim_element(Y,"DIV",{class:!0});var re=children(a);o=claim_text(re,"Author"),re.forEach(detach),s=claim_space(Y),c=claim_element(Y,"DIV",{class:!0});var ie=children(c);d=claim_text(ie,l),ie.forEach(detach),Y.forEach(detach),u=claim_space(C),f=claim_element(C,"DIV",{class:!0});var K=children(f);_=claim_element(K,"DIV",{class:!0});var ae=children(_);p=claim_text(ae,"Version"),ae.forEach(detach),y=claim_space(K),g=claim_element(K,"DIV",{class:!0});var oe=children(g);P=claim_text(oe,h),oe.forEach(detach),K.forEach(detach),v=claim_space(C),m=claim_element(C,"DIV",{class:!0});var V=children(m);A=claim_element(V,"DIV",{class:!0});var se=children(A);E=claim_text(se,"SystemCodeName"),se.forEach(detach),S=claim_space(V),b=claim_element(V,"DIV",{class:!0});var le=children(b);T=claim_text(le,G),le.forEach(detach),V.forEach(detach),N=claim_space(C),w=claim_element(C,"DIV",{class:!0});var L=children(w);D=claim_element(L,"DIV",{class:!0});var ce=children(D);X=claim_text(ce,"editable"),ce.forEach(detach),Q=claim_space(L),j=claim_element(L,"DIV",{class:!0});var ue=children(j);de=claim_text(ue,ee),ue.forEach(detach),L.forEach(detach),he=claim_space(C),k=claim_element(C,"DIV",{class:!0});var H=children(k);z=claim_element(H,"DIV",{class:!0});var $e=children(z);me=claim_text($e,"SystemName"),$e.forEach(detach),ye=claim_space(H),U=claim_element(H,"DIV",{class:!0});var Fe=children(U);_e=claim_text(Fe,te),Fe.forEach(detach),H.forEach(detach),ve=claim_space(C),$=claim_element(C,"DIV",{class:!0});var pe=children($);Z=claim_element(pe,"DIV",{class:!0});var Be=children(Z);ge=claim_text(Be,"folder name"),Be.forEach(detach),be=claim_space(pe),q=claim_element(pe,"DIV",{class:!0});var Ye=children(q);fe=claim_text(Ye,ne),Ye.forEach(detach),pe.forEach(detach),C.forEach(detach),Se=claim_space(I),Ee=claim_element(I,"BR",{}),Oe=claim_space(I),W=claim_element(I,"DIV",{class:!0});var Ke=children(W);claim_component(J.$$.fragment,Ke),Ke.forEach(detach),I.forEach(detach),x.forEach(detach),this.h()},h(){attr(a,"class","tableRowColumn"),attr(c,"class","tableRowColumn"),attr(i,"class","tableRow"),attr(_,"class","tableRowColumn"),attr(g,"class","tableRowColumn"),attr(f,"class","tableRow"),attr(A,"class","tableRowColumn"),attr(b,"class","tableRowColumn"),attr(m,"class","tableRow"),attr(D,"class","tableRowColumn"),attr(j,"class","tableRowColumn"),attr(w,"class","tableRow"),attr(z,"class","tableRowColumn"),attr(U,"class","tableRowColumn"),attr(k,"class","tableRow"),attr(Z,"class","tableRowColumn"),attr(q,"class","tableRowColumn"),attr($,"class","tableRow"),attr(r,"class","table SystemPreviewer"),attr(r,"data-is-edit",!1),attr(W,"class","PageSystemList"),attr(e,"class","MainAppContainerPage MainAppContainerPageSystem")},m(R,x){insert_hydration(R,e,x),append_hydration(e,t),append_hydration(t,r),append_hydration(r,i),append_hydration(i,a),append_hydration(a,o),append_hydration(i,s),append_hydration(i,c),append_hydration(c,d),append_hydration(r,u),append_hydration(r,f),append_hydration(f,_),append_hydration(_,p),append_hydration(f,y),append_hydration(f,g),append_hydration(g,P),append_hydration(r,v),append_hydration(r,m),append_hydration(m,A),append_hydration(A,E),append_hydration(m,S),append_hydration(m,b),append_hydration(b,T),append_hydration(r,N),append_hydration(r,w),append_hydration(w,D),append_hydration(D,X),append_hydration(w,Q),append_hydration(w,j),append_hydration(j,de),append_hydration(r,he),append_hydration(r,k),append_hydration(k,z),append_hydration(z,me),append_hydration(k,ye),append_hydration(k,U),append_hydration(U,_e),append_hydration(r,ve),append_hydration(r,$),append_hydration($,Z),append_hydration(Z,ge),append_hydration($,be),append_hydration($,q),append_hydration(q,fe),append_hydration(t,Se),append_hydration(t,Ee),append_hydration(t,Oe),append_hydration(t,W),mount_component(J,W,null),M=!0},p(R,[x]){var C,Y,re,ie,K,ae,oe,V,se,le,L,ce,ue,H;(!M||x&2)&&l!==(l=((Y=(C=R[1])==null?void 0:C.author)!=null?Y:unknownString)+"")&&set_data(d,l),(!M||x&2)&&h!==(h=((ie=(re=R[1])==null?void 0:re.version)!=null?ie:unknownString)+"")&&set_data(P,h),(!M||x&2)&&G!==(G=((ae=(K=R[1])==null?void 0:K.code)!=null?ae:unknownString)+"")&&set_data(T,G),(!M||x&2)&&ee!==(ee=((V=(oe=R[1])==null?void 0:oe.isEditable)!=null?V:unknownString)+"")&&set_data(de,ee),(!M||x&2)&&te!==(te=((le=(se=R[1])==null?void 0:se.name)!=null?le:unknownString)+"")&&set_data(_e,te),(!M||x&2)&&ne!==(ne=((ce=(L=R[1])==null?void 0:L.folderName)!=null?ce:unknownString)+"")&&set_data(fe,ne);const I={};x&1&&(I.collection=(H=(ue=R[0])==null?void 0:ue.map(func))!=null?H:[]),J.$set(I)},i(R){M||(add_render_callback(()=>{!M||(F||(F=create_bidirectional_transition(r,fade,{},!0)),F.run(1))}),transition_in(J.$$.fragment,R),M=!0)},o(R){F||(F=create_bidirectional_transition(r,fade,{},!1)),F.run(0),transition_out(J.$$.fragment,R),M=!1},d(R){R&&detach(e),R&&F&&F.end(),destroy_component(J)}}}let unknownString="unknown";const func=n=>({key:n.code,value:n.name});function instance$4(n,e,t){let{context:r}=e;r.activeSystem;let i=[];const a=new SystemPreview;let o=a;onMount(()=>{var d;t(0,i=(d=r.availablePreviews)!==null&&d!==void 0?d:[]),s()});function s(){return __awaiter(this,void 0,void 0,function*(){let d=yield APIContext.getAllSystems();t(4,r.availablePreviews=d.response,r),t(0,i=d.response)})}function c(){t(1,o=a)}function l(d){const u=i.find(f=>f.code==d);return console.log(u),o==u?(t(1,o=a),!1):!0}return a.isEditable=null,n.$$set=d=>{"context"in d&&t(4,r=d.context)},[i,o,c,l,r]}class SystemPage extends SvelteComponent{constructor(e){super(),init(this,e,instance$4,create_fragment$4,safe_not_equal,{context:4})}}function create_fragment$3(n){let e,t,r,i,a,o,s,c,l,d;return{c(){e=element("div"),t=element("div"),r=text("X2"),i=space(),a=element("div"),o=element("p"),s=text(n[1]),this.h()},l(u){e=claim_element(u,"DIV",{class:!0,"data-active":!0});var f=children(e);t=claim_element(f,"DIV",{class:!0});var _=children(t);r=claim_text(_,"X2"),_.forEach(detach),i=claim_space(f),a=claim_element(f,"DIV",{class:!0});var p=children(a);o=claim_element(p,"P",{});var y=children(o);s=claim_text(y,n[1]),y.forEach(detach),p.forEach(detach),f.forEach(detach),this.h()},h(){attr(t,"class","MenuBtnIcon"),attr(a,"class","MenuBtnText"),attr(e,"class",c=n[0]?"MenuSBtn":"MenuBtn"),attr(e,"data-active",n[2])},m(u,f){insert_hydration(u,e,f),append_hydration(e,t),append_hydration(t,r),append_hydration(e,i),append_hydration(e,a),append_hydration(a,o),append_hydration(o,s),l||(d=[listen(e,"click",n[3]),listen(e,"keypress",n[6])],l=!0)},p(u,[f]){f&2&&set_data(s,u[1]),f&1&&c!==(c=u[0]?"MenuSBtn":"MenuBtn")&&attr(e,"class",c),f&4&&attr(e,"data-active",u[2])},i:noop,o:noop,d(u){u&&detach(e),l=!1,run_all(d)}}}function instance$3(n,e,t){let{special:r=!1}=e,{text:i="Basic information and settings"}=e,{title:a="Home"}=e,o;function s(u){t(2,o=u)}let c=createEventDispatcher();function l(){console.log("clickyy"),c("click")}function d(u){bubble.call(this,n,u)}return n.$$set=u=>{"special"in u&&t(0,r=u.special),"text"in u&&t(4,i=u.text),"title"in u&&t(1,a=u.title)},[r,a,o,l,i,s,d]}class MenuBtn extends SvelteComponent{constructor(e){super(),init(this,e,instance$3,create_fragment$3,safe_not_equal,{special:0,text:4,title:1,setActive:5})}get setActive(){return this.$$.ctx[5]}}function get_each_context(n,e,t){const r=n.slice();return r[10]=e[t],r[11]=e,r[12]=t,r}function create_each_block(n){let e,t=n[12],r;const i=()=>n[6](e,t),a=()=>n[6](null,t);function o(){return n[7](n[12])}let s={special:n[0].includes(n[10]),title:n[10]};return e=new MenuBtn({props:s}),i(),e.$on("click",o),{c(){create_component(e.$$.fragment)},l(c){claim_component(e.$$.fragment,c)},m(c,l){mount_component(e,c,l),r=!0},p(c,l){n=c,t!==n[12]&&(a(),t=n[12],i());const d={};l&5&&(d.special=n[0].includes(n[10])),l&4&&(d.title=n[10]),e.$set(d)},i(c){r||(transition_in(e.$$.fragment,c),r=!0)},o(c){transition_out(e.$$.fragment,c),r=!1},d(c){a(),destroy_component(e,c)}}}function create_fragment$2(n){let e,t,r,i,a,o,s,c,l,d,u,f,_,p,y,g,h,P,v=n[2],m=[];for(let E=0;E<v.length;E+=1)m[E]=create_each_block(get_each_context(n,v,E));const A=E=>transition_out(m[E],1,1,()=>{m[E]=null});return{c(){e=element("div"),t=element("div"),r=element("p"),i=text("TTP-RPG System Designer"),a=space(),o=element("div"),s=element("div"),c=space(),l=element("div"),d=space(),u=element("div"),f=space(),_=element("div"),p=space(),y=element("div"),g=space(),h=element("section");for(let E=0;E<m.length;E+=1)m[E].c();this.h()},l(E){e=claim_element(E,"DIV",{class:!0});var S=children(e);t=claim_element(S,"DIV",{class:!0});var b=children(t);r=claim_element(b,"P",{});var G=children(r);i=claim_text(G,"TTP-RPG System Designer"),G.forEach(detach),a=claim_space(b),o=claim_element(b,"DIV",{class:!0});var T=children(o);s=claim_element(T,"DIV",{}),children(s).forEach(detach),c=claim_space(T),l=claim_element(T,"DIV",{}),children(l).forEach(detach),d=claim_space(T),u=claim_element(T,"DIV",{}),children(u).forEach(detach),f=claim_space(T),_=claim_element(T,"DIV",{}),children(_).forEach(detach),p=claim_space(T),y=claim_element(T,"DIV",{}),children(y).forEach(detach),T.forEach(detach),b.forEach(detach),g=claim_space(S),h=claim_element(S,"SECTION",{class:!0});var N=children(h);for(let w=0;w<m.length;w+=1)m[w].l(N);N.forEach(detach),S.forEach(detach),this.h()},h(){attr(o,"class","colorscheme"),attr(t,"class","MenuTitle"),attr(h,"class","MenuBtnContainer"),attr(e,"class","Menu")},m(E,S){insert_hydration(E,e,S),append_hydration(e,t),append_hydration(t,r),append_hydration(r,i),append_hydration(t,a),append_hydration(t,o),append_hydration(o,s),append_hydration(o,c),append_hydration(o,l),append_hydration(o,d),append_hydration(o,u),append_hydration(o,f),append_hydration(o,_),append_hydration(o,p),append_hydration(o,y),append_hydration(e,g),append_hydration(e,h);for(let b=0;b<m.length;b+=1)m[b]&&m[b].m(h,null);P=!0},p(E,[S]){if(S&15){v=E[2];let b;for(b=0;b<v.length;b+=1){const G=get_each_context(E,v,b);m[b]?(m[b].p(G,S),transition_in(m[b],1)):(m[b]=create_each_block(G),m[b].c(),transition_in(m[b],1),m[b].m(h,null))}for(group_outros(),b=v.length;b<m.length;b+=1)A(b);check_outros()}},i(E){if(!P){for(let S=0;S<v.length;S+=1)transition_in(m[S]);P=!0}},o(E){m=m.filter(Boolean);for(let S=0;S<m.length;S+=1)transition_out(m[S]);P=!1},d(E){E&&detach(e),destroy_each(m,E)}}}function instance$2(n,e,t){let r,{regularOptions:i=[]}=e,{specialOptions:a=[]}=e,{startChosen:o=""}=e,s=createEventDispatcher(),c=[],l=null;function d(_){const p=c[_];p!=l&&(l&&l.setActive(!1),p.setActive(!0),l=p,s("changePage",r[_]))}onMount(()=>{let _=r.findIndex(p=>p==o);_!=-1&&d(_)});function u(_,p){binding_callbacks[_?"unshift":"push"](()=>{c[p]=_,t(1,c)})}const f=_=>d(_);return n.$$set=_=>{"regularOptions"in _&&t(4,i=_.regularOptions),"specialOptions"in _&&t(0,a=_.specialOptions),"startChosen"in _&&t(5,o=_.startChosen)},n.$$.update=()=>{n.$$.dirty&17&&t(2,r=i.concat(...a))},[a,c,r,d,i,o,u,f]}class Menu extends SvelteComponent{constructor(e){super(),init(this,e,instance$2,create_fragment$2,safe_not_equal,{regularOptions:4,specialOptions:0,startChosen:5})}}function create_if_block_4(n){let e,t;return{c(){e=element("p"),t=text("1")},l(r){e=claim_element(r,"P",{});var i=children(e);t=claim_text(i,"1"),i.forEach(detach)},m(r,i){insert_hydration(r,e,i),append_hydration(e,t)},p:noop,i:noop,o:noop,d(r){r&&detach(e)}}}function create_if_block_3(n){let e,t;return{c(){e=element("p"),t=text("1")},l(r){e=claim_element(r,"P",{});var i=children(e);t=claim_text(i,"1"),i.forEach(detach)},m(r,i){insert_hydration(r,e,i),append_hydration(e,t)},p:noop,i:noop,o:noop,d(r){r&&detach(e)}}}function create_if_block_2(n){let e,t;return{c(){e=element("p"),t=text("1")},l(r){e=claim_element(r,"P",{});var i=children(e);t=claim_text(i,"1"),i.forEach(detach)},m(r,i){insert_hydration(r,e,i),append_hydration(e,t)},p:noop,i:noop,o:noop,d(r){r&&detach(e)}}}function create_if_block_1(n){let e,t,r,i,a;return t=new SystemPage({props:{context:n[0]}}),{c(){e=element("div"),create_component(t.$$.fragment)},l(o){e=claim_element(o,"DIV",{});var s=children(e);claim_component(t.$$.fragment,s),s.forEach(detach)},m(o,s){insert_hydration(o,e,s),mount_component(t,e,null),a=!0},p(o,s){const c={};s&1&&(c.context=o[0]),t.$set(c)},i(o){a||(transition_in(t.$$.fragment,o),add_render_callback(()=>{!a||(i&&i.end(1),r=create_in_transition(e,fly,{x:100}),r.start())}),a=!0)},o(o){transition_out(t.$$.fragment,o),r&&r.invalidate(),i=create_out_transition(e,fly,{x:-100}),a=!1},d(o){o&&detach(e),destroy_component(t),o&&i&&i.end()}}}function create_if_block(n){let e,t,r,i;return{c(){e=element("div")},l(a){e=claim_element(a,"DIV",{});var o=children(e);o.forEach(detach)},m(a,o){insert_hydration(a,e,o),i=!0},p:noop,i(a){i||(add_render_callback(()=>{!i||(r&&r.end(1),t=create_in_transition(e,fly,{x:100}),t.start())}),i=!0)},o(a){t&&t.invalidate(),r=create_out_transition(e,fly,{x:-100}),i=!1},d(a){a&&detach(e),a&&r&&r.end()}}}function create_fragment$1(n){let e,t,r,i,a,o,s;t=new Menu({props:{regularOptions:["home","system","data tables","export","import"],startChosen:n[1]}}),t.$on("changePage",n[3]);const c=[create_if_block,create_if_block_1,create_if_block_2,create_if_block_3,create_if_block_4],l=[];function d(u,f){return u[1]=="home"?0:u[1]=="system"?1:u[1]=="home1"?2:u[1]=="home2"?3:u[1]=="home3"?4:-1}return~(a=d(n))&&(o=l[a]=c[a](n)),{c(){e=element("div"),create_component(t.$$.fragment),r=space(),i=element("section"),o&&o.c(),this.h()},l(u){e=claim_element(u,"DIV",{class:!0});var f=children(e);claim_component(t.$$.fragment,f),r=claim_space(f),i=claim_element(f,"SECTION",{class:!0});var _=children(i);o&&o.l(_),_.forEach(detach),f.forEach(detach),this.h()},h(){attr(i,"class","MainAppContainerPages"),attr(e,"class","MainAppContainer")},m(u,f){insert_hydration(u,e,f),mount_component(t,e,null),append_hydration(e,r),append_hydration(e,i),~a&&l[a].m(i,null),s=!0},p(u,[f]){const _={};f&2&&(_.startChosen=u[1]),t.$set(_);let p=a;a=d(u),a===p?~a&&l[a].p(u,f):(o&&(group_outros(),transition_out(l[p],1,1,()=>{l[p]=null}),check_outros()),~a?(o=l[a],o?o.p(u,f):(o=l[a]=c[a](u),o.c()),transition_in(o,1),o.m(i,null)):o=null)},i(u){s||(transition_in(t.$$.fragment,u),transition_in(o),s=!0)},o(u){transition_out(t.$$.fragment,u),transition_out(o),s=!1},d(u){u&&detach(e),destroy_component(t),~a&&l[a].d()}}}function instance$1(n,e,t){let r,i=writable("system");component_subscribe(n,i,s=>t(1,r=s));let{context:a}=e;function o(s){i.set(s.detail),console.log("changePage "+i)}return n.$$set=s=>{"context"in s&&t(0,a=s.context)},[a,r,i,o]}class App$1 extends SvelteComponent{constructor(e){super(),init(this,e,instance$1,create_fragment$1,safe_not_equal,{context:0})}}function create_fragment(n){let e,t,r;return t=new App$1({props:{context:n[0]}}),{c(){e=element("div"),create_component(t.$$.fragment)},l(i){e=claim_element(i,"DIV",{});var a=children(e);claim_component(t.$$.fragment,a),a.forEach(detach)},m(i,a){insert_hydration(i,e,a),mount_component(t,e,null),r=!0},p:noop,i(i){r||(transition_in(t.$$.fragment,i),r=!0)},o(i){transition_out(t.$$.fragment,i),r=!1},d(i){i&&detach(e),destroy_component(t)}}}function instance(n){return[new Layout01Context]}class App extends SvelteComponent{constructor(e){super(),init(this,e,instance,create_fragment,safe_not_equal,{})}}const app=new App({target:document.getElementById("app")});module.exports=app;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
